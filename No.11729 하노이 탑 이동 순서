/*

    문제
    세 개의 장대가 있고 첫 번째 장대에는 반경이 서로 다른 n개의 원판이 쌓여 있다. 각 원판은 반경이 큰 순서대로 쌓여있다. 이제 수도승들이 다음 규칙에 따라 첫 번째 장대에서 세 번째 장대로 옮기려 한다.

    한 번에 한 개의 원판만을 다른 탑으로 옮길 수 있다.
    쌓아 놓은 원판은 항상 위의 것이 아래의 것보다 작아야 한다.
    이 작업을 수행하는데 필요한 이동 순서를 출력하는 프로그램을 작성하라. 단, 이동 횟수는 최소가 되어야 한다.

    아래 그림은 원판이 5개인 경우의 예시이다.



    입력
    첫째 줄에 첫 번째 장대에 쌓인 원판의 개수 N (1 ≤ N ≤ 20)이 주어진다.

    출력
    첫째 줄에 옮긴 횟수 K를 출력한다.

    두 번째 줄부터 수행 과정을 출력한다. 두 번째 줄부터 K개의 줄에 걸쳐 두 정수 A B를 빈칸을 사이에 두고 출력하는데, 이는 A번째 탑의 가장 위에 있는 원판을 B번째 탑의 가장 위로 옮긴다는 뜻이다.

*/

/*

 풀이: 이해하는것에 상당히 어려운 문제였습니다
 
       일단 하노이 탑의 공식은  n개의 탑을 1번에서 3번 장대로 옮기려면
       (loop 1)n-1개의 탑을 2번장대에 쌓고 
       (loop 2)1번장대의 1개의 원판을 3번장대로 옮긴후에 
       (loop 3)다시 n-1개의 탑을 2번장대에서 3번장대로 옮기는 방식입니다.
       
       공식의 구조를 보면 상당히 간단하게 풀어져 있지만 해당 방식을 제것으로 만드는 것이 상당히 어려웠습니다.
       재귀함수내에서 2번을 자기 자신을 다시 호출하게 되는데 이것이 정말 구조적으로 생각하는것이 쉽지 않았습니다.
       
       가장 놀라운점은 처음 시작을 입력을 하게 되면 동적으로 매개변수를 구분하여 입력값을 넣어주기때문에 매게변수의 값이 구분되어 나오는 구조가 신기했습니다
       
       

*/

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Main {
	
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		br.close();
		bw.write((int)Math.pow(2, n)-1+"\n");
		hanoi(n,"1","2","3");
		bw.flush();
		bw.close();
		
	}
	
	public static void hanoi(int n, String start, String sub, String target) throws IOException {
		
		if(n==1) {
			bw.write(start+" "+target+"\n");
			return;
		}
		
		//기본에서 n-1개 서브로 옯김
		//기본에서 목표로 1개 옯김
		//서브에서 n-1 목표로 옯김
		
		hanoi(n-1, start, target, sub);
		bw.write(start+" "+target+"\n");
		hanoi(n-1, sub, start, target);
		
	}
}
