/*
    약수의 합 성공

    시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
    1 초 (추가 시간 없음)	512 MB	6272	1541	1163	26.474%
    문제
    두 자연수 A와 B가 있을 때, A = BC를 만족하는 자연수 C를 A의 약수라고 한다. 예를 들어, 2의 약수는 1, 2가 있고, 24의 약수는 1, 2, 3, 4, 6, 8, 12, 24가 있다. 자연수 A의 약수의 합은 A의 모든 약수를 더한 값이고, f(A)로 표현한다. x보다 작거나 같은 모든 자연수 y의 f(y)값을 더한 값은 g(x)로 표현한다.

    자연수 N이 주어졌을 때, g(N)을 구해보자.

    입력
    첫째 줄에 테스트 케이스의 개수 T(1 ≤ T ≤ 100,000)가 주어진다. 둘째 줄부터 테스트 케이스가 한 줄에 하나씩 주어지며 자연수 N(1 ≤ N ≤ 1,000,000)이 주어진다.

    출력
    각각의 테스트 케이스마다, 한 줄에 하나씩 g(N)를 출력한다.
*/

/*
  <풀이> : 
        N의 약수는 N%x==0 일때 x와 n/x가 약수가 되고 이과정을 sqrt(N) 까지 해주면 값들이 모두 나오게 됩니다 
        sqrt(N) == x 일때는  x와 n/x가 모두 되는것이 아니라 두 수가 같은 수임으로 1개를 구했다고 생각하면 됩니다.
        위의 약수를 구하는 과정은 시간 복잡도가 O(sqrt(N))이 됩니다. 
        하지만 g(N)의 시간 복잡도는 f(1)+f(2)...+f(N)이 됨으로 N번 더하기 연산을 해야 합니다. O(N*sqrt(N))이 됩니다
        N*sqrt(N) = 10억 따라서 1초안에 해결이 불가능합니다.
        
        따라서 다른방법인 약수의 합을 효과적으로 구하는 방법은 
        1~N까지의 약수들 중에 x가 등장하는 횟수는 
        N/x개 가 존재 함으로 N/x*x를 해주면 x의 등장횟수*x가 됨으로 x가 1~N까지의 수중 x가 약수로 존재하는 합이 됩니다 이과정을
        x를 1~N까지 반복 하게 되면 g(N)의 시간복잡도는 O(N)이 됩니다.
        따라서 최악의 경우를 확인 하면 T*N이 됩니다 1000억이 됨으로 1초안에 해결이 불가능합니다.
        
        dp테이블을 만들어 메모이 제이션을 한다 해도 최악의 경우에는  O(N+1*N/2)의 시간 복잡도를 가지게 되고 5천억이 넘어가게 됩니다.
        위의 방법들을 모두 이용이 불가능 하니 다른 방법으로 풀어야 겠다 생각하여
        테이블을 미리 만들어두고 x는 max까지 x의 배수에 x를 더해주는 방식으로
        x를 더해주면 된다고 생각하였습니다.
        위의 과정은 약수를 구해준것이고 해당 약수를 구한 테이블 에 
        2번인덱스 부터 max번 인덱스 까지 i-1번 인덱스의 값을 더해주게 되면 i번 인덱스에는 1~i까지의 약수의 합이 대입됩니다.
        위의 방식을 생각해보면 O(2N+2T) 보다 살짝 크게 됩니다 그럼으로 최악의 경우에도 1초 안에 해결이 가능합니다
        
        최근에 시간 복잡도를 표기 하는 방식중 Big-O 표기법을 배웠습니다.
        이것을 응용하고 나니 코드를 작성하기 전에 미리 어느정도 시간이 걸릴지 알수 있게 되었습니다.
        
*/ 

import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		int T = Integer.parseInt(br.readLine());
		int[] input = new int[T];
		int max = 0;
		for (int i = 0; i < T; i++) {
			input[i] = Integer.parseInt(br.readLine());
			if (input[i] > max)
				max = input[i];
		}
		long[] dp = new long[max + 1];
		for (int i = 1; i <= max; i++) {
			for (int j = 1; j * i <= max; j++) {
				dp[i * j] += i;
			}
		}
		for (int i = 2; i <= max; i++) {
			dp[i] += dp[i - 1];
		}

		for (int answer : input) {
			sb.append(dp[answer]).append("\n");
		}
		System.out.println(sb);
	}
}
