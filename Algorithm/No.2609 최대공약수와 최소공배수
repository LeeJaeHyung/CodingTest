/*
  <문제>
  
  최대공약수와 최소공배수 성공
 
  시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
  1 초	128 MB	67382	39351	31947	59.315%
  문제
  두 개의 자연수를 입력받아 최대 공약수와 최소 공배수를 출력하는 프로그램을 작성하시오.

  입력
  첫째 줄에는 두 개의 자연수가 주어진다. 이 둘은 10,000이하의 자연수이며 사이에 한 칸의 공백이 주어진다.

  출력
  첫째 줄에는 입력으로 주어진 두 수의 최대공약수를, 둘째 줄에는 입력으로 주어진 두 수의 최소 공배수를 출력한다.
*/

/*
  <풀이>
  유클리드 호제법을 이용하여 풀었습니다.
  유클리드 호제법이란 최대공약수(GCD Greatest Common Divisor)를 빠르게 구할 수 있는 알고리즘의 한 종류 입니다.
  두 수 A, B가 존재 한다면 둘 중 큰수를 작은 수로 나눈 나머지와 작은수를 가지고 위같은 방식을 반복하며 결과 중 작은 수가 0이 된다면 나머지 수가 그 두 수 A, B의 최대공약수가 됩니다.
  
  결국 수식으로 보자면 아래와 같습니다.
  
  GCD(A, B) -> GCD(B, A%B) -> GCD(A%B, B%(A%B)) -> ..... GCD(x, 0);
  위의 식에서 x가 두 수 A, B의 최대공약수가 됩니다.
  
  위의 방식이 효율적인이유는 시간 복잡도가 상당히 작다 입니다.
  
  두수의 최대공약수를 구하는 과정을 일반적인 수식으로 대입시
  A>B라면 아래의 코드를 통해 구할 수 있습니다.
  
  int gcd = 1;// 모든 수의 GCD의 안에는 1이 들어갈 수 있습니다.
  boolean loop = true;
  while(loop){
    for(int i = 2; i <= B; i++){
      if(A%i == 0 && B%i == 0){
        if(i == B){
          loop = false;
        }
        gcd *= i;
        A /= i;
        B /= i;
      }
    }
  }
  System.out.println(gcd);
  하지만 위의 방식은 시간 복잡도가 상당히 커집니다.
  
  Ex) A = 12345 , B = 12121 라면
    
    <유클리드 호제법> 
    GCD(12345, 12121) -> GCD(12121, 224) -> GCD(224, 25) -> GCD(25, 24) -> GCD(24, 1) -> GCD(1, 0) -> 최대공약수는 1
    6번의 계산 많에 결과를 낼 수 있었습니다.
    
    <일반 수식을 옮긴 방식>
    위의 방식을 통해 위의 수는 서로 최대공약수가 1임으로 1을 재외한 어떠한 수도 공약수로 존재하지 않는 서로소입니다.
    따라서 A>B중 2~B까지 모든 수로 나누어야 보아야 함으로 위의 연산횟수는 B-1 따라서 연산횟수는 12120번의 루프를 돌아야 합니다.
    
    연산횟수의 편차가 큰편입니다.
   
    효율적인 방식인 유클리드 호제법을 이용하였습니다.
    
    최대공약수를 구하였으니 다음으로는 최소 공배수를 구하는 법입니다.
    최소공배수의 공식은 gcd*(A/gcd)*(B/gcd)입니다.
    
    위에서  유클리드 호제법을 이용한 gcd를 바로 대입하여 출력하여 주어 문제를 풀었습니다.
    
    
    
  
  
*/


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Main {
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int b = Integer.parseInt(st.nextToken());
		int s = Integer.parseInt(st.nextToken());
		int x = b;//최소 공배수를 구하기 위하여 기록해두는 공간 x, y
		int y = s;
		
		
		if(s==b) {// 두값이 같다면 최소 공배수와 최대공약수는 자신이 최대공약수와 최소공배수가 됩니다.
			System.out.println(s);
			System.out.println(s);
		}else {
			if(s>b) {// s>b 라면 두수의 위치를 바꾸어 주어야 합니다.
				int temp = s;
				s = b;
				b = temp;
			}
			while(s!=0) {// 유클리드 호제법을 적용
				int temp = s;
				s = b%s;
				b = temp;
			}
			System.out.println(b);// s가 0이 되어 loop를 탈출 하였습니다  따라서 b가 최대 공약수가 됩니다.
			System.out.println((b*(x/b)*(y/b))); // 최소공배수의 수식은 최대공약수*(A/최대공약수)*(B/최대공약수)임으로 해당 수식을 대입하여 출력
		}
	}
}
