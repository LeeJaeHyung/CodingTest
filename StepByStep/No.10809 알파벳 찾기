/*
알파벳 소문자로만 이루어진 단어 S가 주어진다. 각각의 알파벳에 대해서, 단어에 포함되어 있는 경우에는 처음 등장하는 위치를, 포함되어 있지 않은 경우에는 -1을 출력하는 프로그램을 작성하시오.

입력
첫째 줄에 단어 S가 주어진다. 단어의 길이는 100을 넘지 않으며, 알파벳 소문자로만 이루어져 있다.

출력
각각의 알파벳에 대해서, a가 처음 등장하는 위치, b가 처음 등장하는 위치, ... z가 처음 등장하는 위치를 공백으로 구분해서 출력한다.

만약, 어떤 알파벳이 단어에 포함되어 있지 않다면 -1을 출력한다. 단어의 첫 번째 글자는 0번째 위치이고, 두 번째 글자는 1번째 위치이다.
*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//a = 97 z = 122 -97+1을 한값을 인덱스 해당 번호로 입력받는다 따라서 공간은 26개
		//강제 형변환을 이용하여 해당값을 변경한다
		String input = br.readLine();
		int[] output = new int[26];
		for(int i = 97; i<123; i++) {
			char ch = (char)i;
			output[i-97] = input.indexOf(ch);//
		}
		StringBuilder sb = new StringBuilder();
		
		for(int out : output) {
			sb.append(out+" ");
		}
		System.out.println(sb);
		
	}
}

/*
해당문제는 다양한 방식으로 풀수있다 처음에 생각한 방식은 Array.fill()을 이용해 해당 변수의 모든값을 -1 로 초기화 한후 받아온 값을 각각 char형식의 데이터로 나눈 뒤 해당 데이터의 자리수를 
가장 작은 인덱스 -1보다 크 면서 가장 작은 값을 대입하여 나중에 출력하는 방식을 택하였는데 
문제에서 입력이 100자 보다 작게 주어진다는 것을보고 해당 방식은 100번이상 비교하는 방식이 될것이라 비효율 적이라 생각하여
a~z까지의 문자들을 indexOf 함수를 이용하여 값을 전부 채워 넣는 방식을 채택하였습니다.

아래의 코드를 분석하게 된다면
*/

import java.io.*;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        String input = br.readLine();

        int[] alphabet = new int[26];
        Arrays.fill(alphabet, -1);

        // 문자열 오른쪽 끝부터 왼쪽으로 문자 탐색(역순)
        // 역순으로 탐색할 경우 가장 마지막에 갱신된 위치가 정방향으로 볼 때 가장 처음 발견된 위치기 때문
        for (int i = input.length() - 1; i > -1 ; i--) {
            alphabet[input.charAt(i) - 'a'] = i;
        }

        StringBuilder sb = new StringBuilder();
        for (int i : alphabet) {
            sb.append(i);
            sb.append(" ");
        }

        bw.write(sb.toString());
        bw.flush();

        br.close();
        bw.close();

    }
}
/*
위의 방식은 처음생각했던 방식대로 풀으셨다 오른쪽에서 순차적으로 비교하게 됨으로 가장 작은 인덱스 번호가 입력으로 들어가게 된다.
*/
