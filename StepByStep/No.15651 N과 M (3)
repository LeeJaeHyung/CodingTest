/*
      N과 M (3) 성공

      시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
      1 초	512 MB	36549	24153	18402	66.325%
      문제
      자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.

      1부터 N까지 자연수 중에서 M개를 고른 수열
      같은 수를 여러 번 골라도 된다.
      입력
      첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 7)

      출력
      한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.

      수열은 사전 순으로 증가하는 순서로 출력해야 한다.
*/
/*
  풀이 : 재귀 호출로 solution(int idx) 호출하여 풀었습니다.
         solution(int idx)는 idx == M일 때까지 자기 자신을 재귀 호출하며 
         static answer에 해당 재귀 호출에서 호출된 idx * 2번 인덱스에  1~N까지의 값을 대입하고 
         idx == M 인순간 answer을 StringBuilder에 쌓아 출력을 대입하였습니다.
         
         처음으로 풀어본 재출된 답변에서는 int[]의 자료형으로 answer을 이용하였습니다.
         이후에 다른 분들의 풀이를 보고 char[]의 형태로 answer를 이용하면 조금더 빠르게 동작한다는 것을 알수 있었습니다.
         
*/


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Main {
	static int N, M;
	static char[] answer;
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		answer = new char[2 * M];

		for (int i = 0; i < M - 1; i++)
			answer[2 * i + 1] = ' ';
		answer[2 * M - 1] = '\n';
		solution(0);
		System.out.println(sb);
	}

	public static void solution(int idx) {
		if (idx == M) {
			sb.append(answer);
			return;
		}
		for (int i = 1; i < N + 1; i++) {
			answer[idx * 2] = (char) (i + '0');
			solution(idx + 1);
		}
	}
}
