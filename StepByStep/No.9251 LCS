/*
	LCS 성공

	시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
	1 초	256 MB	50403	20587	15064	40.413%
	문제
	LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.

	예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.

	입력
	첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.

	출력
	첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를 출력한다.
*/
		
/*
	풀이 :  처음에는 2565번 전기줄 문제의 풀이를 도입하여 

		a와 b의 같은 문자가 저장되어있는 인덱스 번호들을 각각 담는 배열을 선언 하여 해당 배열의 한 쪽을 오름차순으로 정리하고 
		다른 반대쪽 인덱스번호의 최대 증가 부분 수열을 고르게 되면 겹치는 부분은 서로 교차 되었음으로 해당 문자의 순서가 어긋나게 선택된 상태가 됨으로
		겹치는 부분이 없이 선택하고 따라서 해당 문자열중 겹치는 최대 공통 부분 수열이 완성 됩니다. 

		위의 문제의 전기줄이라는 개념을 두 입력  a, b중 한 문자열을 기준으로 같은 문자열의 위치를 담는 int[][] input 배열을 생성하고 
		a의 i번째 인덱스의 char형 데이터의 값을 가져와 해당 데이터와 b의 모든 인덱스의 데이터를 체크하여 해당 데이터와 같은 데이터들이 있는경우
		a의 인덱스 위치를 input[i][0]에 대입 b의 인덱스 위치를 input[i][1]에 대입하며 모든 a의 문자열 길이만큼 반복하였습니다.

		위의 과정을 거치게 되면 input에는 겹치게 되는 문자열의 위치를 가지는 2차원 배열로 데이터가 쌓이게 되는데 
		int[][] input의 크기를 얼만큼 주어야 할지를 주어진 데이터로만은 정확하게 알수 없습니다.
		따라서 위의 해결방안은 두 가지 정도가 떠올랐습니다.

		<배열의 크기를 알수없는 문제점 해결방안>
		1. 한 번 모든 데이터들을 순회하며 count를 증가시키며 크기를 확인하고 다시한번 위의 과정을 반복하여 int[][] input에 데이터를 쌓는 법
		2. vactor나 ArrayList를 두개 사용하여 a, b의 인덱스의 값들을 따로 저장하고 하나의 인덱스 번호로 접근하는 법

		위의 문제를 해결하고 다음 과정으로 값을 쌓을 dp테이블을 생성 int[] dp = new int[input.length];
		초기값을 초기화해주고  -> 초기값은 input[0][0]의 데이터를 꺼내오고 for 문을 돌며 해당 데이터와 같을경우 
		for(int i = 0; i < input.lenght; i++) {
			if(input[0][0]!=input[i][0]){
				start = i+1;// 다음 2중 for문에서의 첫번째 for문의 초기값 
				break;
			}
			dp[i] = 1;
		}

		int answer = 0;
		2중 for문을 거치며  첫 번째 for문에서는 int  i = start i < dp.lenght; i++
		두 번째 for문에서는 int j = i-1 ; j>=0; j-- 의 조건식을 가지고 loop를 돕니다
		여기서 if(input[i][0]>input[j][0] && input[i][1]>input[j][1])의 조건을 가지게 되면 이전의 값들중에서 해당 dp에 쌓을 값들을 찾게 됩니다
		dp[i] = Math.max(dp[i],(dp[j]+1)); 이렇게 되면 이전의 경우중 현제 상태가 될수있는 상태중 가장 큰값을 해당dp에 쌓게 됩니다.
		이후에 2중포문중 두 번째 for문이 종료 될때 마다 첫 번째 for문의 마지막에 
		answer = Math.max(answer, dp[i]);를 해주게 되면 모든 loop를 마친 후에 
		answer에는 최대 증가 부분수열의 길이 값이 저장이 됩니다	
		이후에 answer을 출력하여 문제를 풀었습니다.

		<위의 방식의 문제점>
		정답을 유추 할 수는 있지만 해당 알고리즘의 문제점은 
		같은 문자열의 반복되는 수가 증가 하면 할수록 해당 문자열들의 겹치는 인덱스 번호를 담는 input의 길이가 길어지게 됨으로
		시간 복잡도가 증가하게 됩니다.

		<최종 풀이>
		다른 방법을 생각해 본결과 마지막 인덱스에서 부터 재귀 호출로 수를 카운트 하는 방식을 생각하게 되었습니다.
		만약 a와 b중 지금 탐색중인 문자열의 마지막 인덱스에서 a[i] 와 b[j]가 각각 마지막 인덱스라 하면 
		a[i]==b[j] 일때 와 a[i]!=b[j]일때 두가지 경우가 있고
		a[i]==b[j] 일때는 a[i-1]b[j-1]인상태의 결과에 +1 해준결과가 정답이 되고
		a[i]!=b[j] 일때는 a[i-1]b[j]인 상태와 a[i]b[j-1]인 상태중 큰값이 정답이 됨을 확인할 수 있었습니다.
		위의 과정을 재귀함수를 이용하여서 풀었지만 무수하게 두문자가 다른 경우일때 마다 무수히 많이 재귀적으로 백트래킹을 두번 반복하게 됩니다.
		문제점 =  시간 초과 발생

		재귀적 호출과정에서 발생하는 모든 경우의 탐색하는 과정을 메모이제이션을 통해 그냥 상수항의 속도 만큼 줄일수 있겠다 생각이 들었습니다.
		따라서 이미 한번 방문 한적있는지 확인하는 boolean[][] check  = new boolean[a.length][b.length]을 생성 check[i][j] = ture 이미한번 방문하여 결과값을 dp[i][j]에 저장해둔 상태로 정의
		재귀적으로 호출하는 과정에서 check를 확인 해당 값이 있다면 dp[i][j]를 return 없다면 재귀호출 하여 마지막에 dp테이블에 값을 저장하는 방식으로 문제를 풀었습니다.

*/

import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main {
	
	static char[] a, b;
	static int[][] dp;
	static boolean[][] check;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		a = br.readLine().toCharArray();
		b = br.readLine().toCharArray();
		dp = new int[a.length][b.length];
		check = new boolean[a.length][b.length];
		System.out.println(lcs(a.length-1, b.length-1));
		
	
	}
	public static int lcs(int i, int j) {
		if(i==-1||j==-1) {// 둘중 하나로 길이가 0이면 return
			return 0;
		}
		int aB = 0;
		int bB = 0;
		int aBbB = 0;
		
		if(i>0 && j>0) {
			if(check[i][j]) {
				return dp[i][j];
			}else {
				if(a[i]==b[j]) {
					if(check[i-1][j-1]) {
						aBbB = dp[i-1][j-1]+1;
					}else {
						aBbB = lcs(i-1, j-1)+1;
					}
				}else {
					if(check[i-1][j]) {
						aB = dp[i-1][j];
					}else {
						aB = lcs(i-1, j);
					}
					if(check[i][j-1]) {
						bB = dp[i][j-1];
					}else {
						bB = lcs(i, j-1);
					}
				}
			}
		}else {
			if(i>=0||j>=0) {
				if(a[i]==b[j]) {
					aBbB = lcs(i-1, j-1)+1;
				}
			}
			aB = lcs(i-1, j);
			bB = lcs(i, j-1);
		}
		check[i][j] = true;
		return dp[i][j] = Math.max(Math.max(aB, bB),aBbB);
		
	}
}
