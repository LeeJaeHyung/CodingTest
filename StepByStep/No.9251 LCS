/*
	LCS 성공

	시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
	1 초	256 MB	50403	20587	15064	40.413%
	문제
	LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.

	예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.

	입력
	첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.

	출력
	첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를 출력한다.
*/

/*
	
*/

import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main {
	
	static char[] a, b;
	static int[][] dp;
	static boolean[][] check;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		a = br.readLine().toCharArray();
		b = br.readLine().toCharArray();
		dp = new int[a.length][b.length];
		check = new boolean[a.length][b.length];
		System.out.println(lcs(a.length-1, b.length-1));
		
	
	}
	public static int lcs(int i, int j) {
		if(i==-1||j==-1) {// 둘중 하나로 길이가 0이면 return
			return 0;
		}
		int aB = 0;
		int bB = 0;
		int aBbB = 0;
		
		if(i>0 && j>0) {
			if(check[i][j]) {
				return dp[i][j];
			}else {
				if(a[i]==b[j]) {
					if(check[i-1][j-1]) {
						aBbB = dp[i-1][j-1]+1;
					}else {
						aBbB = lcs(i-1, j-1)+1;
					}
				}else {
					if(check[i-1][j]) {
						aB = dp[i-1][j];
					}else {
						aB = lcs(i-1, j);
					}
					if(check[i][j-1]) {
						bB = dp[i][j-1];
					}else {
						bB = lcs(i, j-1);
					}
				}
			}
		}else {
			if(i>=0||j>=0) {
				if(a[i]==b[j]) {
					aBbB = lcs(i-1, j-1)+1;
				}
			}
			aB = lcs(i-1, j);
			bB = lcs(i, j-1);
		}
		check[i][j] = true;
		return dp[i][j] = Math.max(Math.max(aB, bB),aBbB);
		
	}
}
