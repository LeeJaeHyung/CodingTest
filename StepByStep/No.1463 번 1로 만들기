/*

    1로 만들기 성공

    시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
    0.15 초 (하단 참고)	128 MB	195682	63600	40408	32.131%
    문제
    정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

    X가 3으로 나누어 떨어지면, 3으로 나눈다.
    X가 2로 나누어 떨어지면, 2로 나눈다.
    1을 뺀다.
    정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.

    입력
    첫째 줄에 1보다 크거나 같고, 106보다 작거나 같은 정수 N이 주어진다.

    출력
    첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.

*/

/*
    풀이 :  점화식 유도 과정 N의 상태에 도달할 수 있는 경우
           1.N-1에서 온경우
           2.N/2에서 온경우
           3.N/3에서 온경우
           
           3가지의 경우에서 올 수 있고
           dp[N+1] 에는  1~N번 까지의 인덱스를 사용
           해당 인덱스 들에는 해당수에서 1까지 가는 최소 연산횟수들을 기록한다
           
           해당 수가 3으로 나누어 떨어지면 min과 dp[N/3]두 값 중 작은 값을 min에 대입
           다시 이어서 해당 수가 2로 나누어 떨어지면 min 과 dp[N/2] 두 값 중 작은 값을 min에 대입
           마지막으로 dp[N-1]의 수가 min 보다 작으면 min에 대입하여
           min + 1 최소 연산횟수를 dp[N]에 대입하여 출력하였습니다.
           
           점화식을 유도 하는 과정이 저에게 어려웠습니다 어떤 방식으로 유도하여 나갈지를 생각해보아야 겠습니다.
           N의 상태에 도달할 수 있는 경우 => Problem 을 더작은 Problem으로 해결할 수 있는 방법을 찾는것이 어려운거 같습니다.
           
 

*/

import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main {

	static int N;
	static int[] dp;

	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		dp = new int[N + 1];
		if (N < 4) {
			switch (N) {
			case 1:
				System.out.println(0);
				break;
			case 2:
				System.out.println(1);
				break;
			case 3:
				System.out.println(1);
				break;
			}
		} else {

			counting();
			System.out.println(dp[N]);
		}

	}

	public static void counting() {

		int target = 4;
		dp[0] = dp[1] = 0;
		dp[2] = dp[3] = 1;

		while (target <= N) {
			int min = 1000000;
			if (target % 3 == 0) {
				min = Math.min(dp[target / 3], min);
			}
			if (target % 2 == 0) {
				min = Math.min(dp[target / 2], min);
			}
			min = Math.min(dp[target - 1], min);
			dp[target] = min+1;
			target++;
		}
	}
}
