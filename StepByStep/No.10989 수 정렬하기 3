/*
  수 정렬하기 3

  시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
  5 초 (하단 참고)	8 MB (하단 참고)	155479	35654	26555	23.424%
  문제
  N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.

  입력
  첫째 줄에 수의 개수 N(1 ≤ N ≤ 10,000,000)이 주어진다. 둘째 줄부터 N개의 줄에는 수가 주어진다. 이 수는 10,000보다 작거나 같은 자연수이다.

  출력
  첫째 줄부터 N개의 줄에 오름차순으로 정렬한 결과를 한 줄에 하나씩 출력한다.
*/

/*
  풀이 : 이 문제는 값의 범위가 10000까지 임으로 상대적으로 값의 범위가 작아 계수정렬(CountingSort)을 이용하여 풀었습니다.
  
         1. 10001의 크기를 갖는 int 배열을 선언 하여 값의 범위까지의 배열을 선언합니다
         2. 입력을 값을 대입하며 maxNum 이라는 입력값중 가장 큰값을 도출하며 입력받은 값의 해당 인덱스의 값을 1씩 증가시켰습니다
            maxNum 이라는 값을 도출 하는 이유는 출력시 10000번째 인덱스 까지 출력하는 것이 아니라 입력 받은 값의 가장 큰수의 인덱스 까지만 출력하면 
            시간을 조금이라도 줄일 수 있을 것 같아서입니다.
            실제로 아래와 같이 조금은 시간이 줄었습니다.
            1772ms ->1680ms
            하지만 입력값 중 가장 큰수가 10000이 되는 경우에는 오히려 더 느려지게 됩니다. 
         3. maxNum 이라는 값까지의 배열의 모든 인덱스를 방문하며 해당 인덱스의 값만큼 StringBuilder에 값들을 쌓았습니다
         4. StringBuilder를 출력
         
 
*/

import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main{
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		int[] check = new int[10001];  
		int n = Integer.parseInt(br.readLine());
		int maxNum = 0;
		for(int i = 0; i < n; i++) {
			int nowNum = Integer.parseInt(br.readLine());
			if(nowNum>maxNum) {
				maxNum = nowNum;
			}
			check[nowNum]++;
		}
		
		for(int i = 0; i <= maxNum; i++) {
			if(check[i]>0) {
				for(int j = 0; j < check[i]; j++) {
					sb.append(i).append("\n");
				}
			}
		}
		System.out.println(sb);
	}
}
