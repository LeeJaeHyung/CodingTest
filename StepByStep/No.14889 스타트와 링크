/*

    스타트와 링크 성공

    시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
    2 초	512 MB	58400	29482	17213	47.125%
    문제
    오늘은 스타트링크에 다니는 사람들이 모여서 축구를 해보려고 한다. 축구는 평일 오후에 하고 의무 참석도 아니다. 축구를 하기 위해 모인 사람은 총 N명이고 신기하게도 N은 짝수이다. 이제 N/2명으로 이루어진 스타트 팀과 링크 팀으로 사람들을 나눠야 한다.

    BOJ를 운영하는 회사 답게 사람에게 번호를 1부터 N까지로 배정했고, 아래와 같은 능력치를 조사했다. 능력치 Sij는 i번 사람과 j번 사람이 같은 팀에 속했을 때, 팀에 더해지는 능력치이다. 팀의 능력치는 팀에 속한 모든 쌍의 능력치 Sij의 합이다. Sij는 Sji와 다를 수도 있으며, i번 사람과 j번 사람이 같은 팀에 속했을 때, 팀에 더해지는 능력치는 Sij와 Sji이다.

    N=4이고, S가 아래와 같은 경우를 살펴보자.

    i\j	1	2	3	4
    1	 	1	2	3
    2	4	 	5	6
    3	7	1	 	2
    4	3	4	5	 
    예를 들어, 1, 2번이 스타트 팀, 3, 4번이 링크 팀에 속한 경우에 두 팀의 능력치는 아래와 같다.

    스타트 팀: S12 + S21 = 1 + 4 = 5
    링크 팀: S34 + S43 = 2 + 5 = 7
    1, 3번이 스타트 팀, 2, 4번이 링크 팀에 속하면, 두 팀의 능력치는 아래와 같다.

    스타트 팀: S13 + S31 = 2 + 7 = 9
    링크 팀: S24 + S42 = 6 + 4 = 10
    축구를 재미있게 하기 위해서 스타트 팀의 능력치와 링크 팀의 능력치의 차이를 최소로 하려고 한다. 위의 예제와 같은 경우에는 1, 4번이 스타트 팀, 2, 3번 팀이 링크 팀에 속하면 스타트 팀의 능력치는 6, 링크 팀의 능력치는 6이 되어서 차이가 0이 되고 이 값이 최소이다.

    입력
    첫째 줄에 N(4 ≤ N ≤ 20, N은 짝수)이 주어진다. 둘째 줄부터 N개의 줄에 S가 주어진다. 각 줄은 N개의 수로 이루어져 있고, i번 줄의 j번째 수는 Sij 이다. Sii는 항상 0이고, 나머지 Sij는 1보다 크거나 같고, 100보다 작거나 같은 정수이다.

    출력
    첫째 줄에 스타트 팀과 링크 팀의 능력치의 차이의 최솟값을 출력한다.
*/


/*
   풀이 : int[]  start에 BackTracking 방식을 이용하여  boolean[] isVisited를 이용하여 중복 제거 임의의 수를 3개 쌓고 해당 수를 기준으로 
          start를 모두 고르는 순간 link는 확정이 되기 때문에 link를 따로 고를 필요가 없음
          
          int startStat = 0;
			    for(int i = 0; i<start.length; i++) {
				    for(int j = i+1; j<start.length; j++) {
					      startStat += getStat(start[i],start[j]);
				    }
			    }
          위의 반복문을 통해 start팀의 총합을 구하고 똑같이 link팀의 총합을 구하여
          Math.abs(startStat-linkStat)를 구하여 answer 보다 값이 작다면 해당 수를 
          answer에 대입하여 진행하였습니다 
          
          결과 재귀호출을 모두 끝내게 되면 answer를 출력하여 문제를 풀었습니다.
          
          처음 풀이 방식에서는 정답은 맞췄지만 시간이 초과 되었습니다.
          따라서 방식을 생각해 본결과 1 2 3 과 1 3 2, 2 1 3, 2 3 1, 3 2 1, 3 1 2 의 값들이 모두 같음으로
          startAndLink() 메소드에서 매개변수로 int before을 받아 이전의 고른 수이후의 값들을 고르도록 하였습니다.
          
          
   
*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Main {

	static int[][] stat;
	static boolean[] isVisited;
	static int N, half;
	static int[] start;
	static int[] link;
	static int answer = 1000000000;

	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		stat = new int[N][N];
		isVisited = new boolean[N];
		half = N / 2;
		start = new int[half];
		link = new int[half];
		StringTokenizer st;
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				stat[i][j] = Integer.parseInt(st.nextToken());
			}
			st = null;
		}
		startAndLink(0,-1);
		System.out.println(answer);

	}

	public static void startAndLink(int team, int before) {
		
		if(team == half) {// 모든 팀을 고름
			
			int startStat = 0;
			for(int i = 0; i<start.length; i++) {
				for(int j = i+1; j<start.length; j++) {
					startStat += getStat(start[i],start[j]);
				}
			}
			int linkStat = 0;
			int linkCount = 0;
			for(int i = 0; i<N; i++) {
				if(!isVisited[i]) {
					link[linkCount++]= i;
				}
			}
			for(int i = 0; i<link.length; i++) {
				for(int j = i+1; j<link.length; j++) {
					linkStat += getStat(link[i],link[j]);
				}
			}
			
			int difference = Math.abs(linkStat-startStat);
			if(answer>difference) {
				answer = difference;
			}
			
			return;
		}
		

		for (int i = before+1; i < N; i++) {// Start고름 고를때 이렇게 고를 필요가 없음
			if (!isVisited[i]) {
				isVisited[i] = true;
				start[team] = i;
				startAndLink(team+1, i);
				isVisited[i] = false;
			}
		}

	}

	public static int getStat(int i, int j) {
		return stat[i][j]+stat[j][i];
	}
}

