/*
스도쿠 성공스페셜 저지
 
시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
1 초	256 MB	63353	18518	11632	27.195%
문제
스도쿠는 18세기 스위스 수학자가 만든 '라틴 사각형'이랑 퍼즐에서 유래한 것으로 현재 많은 인기를 누리고 있다. 이 게임은 아래 그림과 같이 가로, 세로 각각 9개씩 총 81개의 작은 칸으로 이루어진 정사각형 판 위에서 이뤄지는데, 게임 시작 전 일부 칸에는 1부터 9까지의 숫자 중 하나가 쓰여 있다.



나머지 빈 칸을 채우는 방식은 다음과 같다.

각각의 가로줄과 세로줄에는 1부터 9까지의 숫자가 한 번씩만 나타나야 한다.
굵은 선으로 구분되어 있는 3x3 정사각형 안에도 1부터 9까지의 숫자가 한 번씩만 나타나야 한다.
위의 예의 경우, 첫째 줄에는 1을 제외한 나머지 2부터 9까지의 숫자들이 이미 나타나 있으므로 첫째 줄 빈칸에는 1이 들어가야 한다.



또한 위쪽 가운데 위치한 3x3 정사각형의 경우에는 3을 제외한 나머지 숫자들이 이미 쓰여있으므로 가운데 빈 칸에는 3이 들어가야 한다.



이와 같이 빈 칸을 차례로 채워 가면 다음과 같은 최종 결과를 얻을 수 있다.



게임 시작 전 스도쿠 판에 쓰여 있는 숫자들의 정보가 주어질 때 모든 빈 칸이 채워진 최종 모습을 출력하는 프로그램을 작성하시오.

입력
아홉 줄에 걸쳐 한 줄에 9개씩 게임 시작 전 스도쿠판 각 줄에 쓰여 있는 숫자가 한 칸씩 띄워서 차례로 주어진다. 스도쿠 판의 빈 칸의 경우에는 0이 주어진다. 스도쿠 판을 규칙대로 채울 수 없는 경우의 입력은 주어지지 않는다.

출력
모든 빈 칸이 채워진 스도쿠 판의 최종 모습을 아홉 줄에 걸쳐 한 줄에 9개씩 한 칸씩 띄워서 출력한다.

스도쿠 판을 채우는 방법이 여럿인 경우는 그 중 하나만을 출력한다.
*/
/*
  풀이 : 풀이 방식의 유도 에서는 widthChecker(), heightChecker(), areaChecker() 를 구현한후 
         numberChecker()에서 위의 메소드드를 호출하며 계수 정렬하여 3번 반복되는 수들을 뽑아 반환하였습니다
         이후에 정렬된 배열의 모든 요소들을 한번씩 고른후 들어갔습니다
         해당 코드에서 96번째 줄의 초기화 작업없이 진행하는 풀이를 생각했고
         함수가 numberChecker에서 자기 자신을 포함하여 구하였기 때문에 초기화를 해주지 않으면 다음번 호출에서 numberChecker의 값이 달라지게 됩니다.
         
         해결 방법은 구하는데 정말 시간이 오래 걸렸지만
         1.  widthChecker(), heightChecker(), areaChecker() 에서 들어갈수 있는수에서 자기 자신을 제외하여 체크하거나
         2. check = sudoku(index + 1); sudoku[zero[0]][zero[1]] = 0; 와 같이 sudoku()를 호출후 0으로 초기화 해주는 방법이 있습니다.
         
         또한 탐색을 벗어나는 방식이 없어 모든 정답을 출력하는 오류가 발생했었습니다.
         정답 = sudoku(index + 1)이 true면 break 하여 모든 재귀호출을 종료하였습니다.
         
         
*/
/*
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

class Main {

	static int[][] sudoku;
	static ArrayList<int[]> zeroList;
	static boolean[] isVisited;
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		sudoku = new int[9][9];// [0~8][0~8]
		zeroList = new ArrayList<int[]>();
		for (int i = 0; i < 9; i++) {// suboku의 값들을 초기화
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < 9; j++) {
				int number = Integer.parseInt(st.nextToken());
				sudoku[i][j] = number;
				if (number == 0) {
					zeroList.add(new int[] { i, j });
				}
			}
		}
		sudoku(0);
		System.out.println(sb);
	}

	public static boolean sudoku(int index) {
		if (index == zeroList.size()) {
			for (int[] target : sudoku) {
				for (int answer : target) {
					sb.append(answer + " ");
				}
				sb.append("\n");
			}
			return true;
		}

		int[] zero = zeroList.get(index);
		ArrayList<Integer> numberList = numberChecker(zero);
		boolean check = false;
		if (numberList.size() != 0) {
			for (int i = 0; i < numberList.size(); i++) {
					sudoku[zero[0]][zero[1]] = numberList.get(i);
					check = sudoku(index + 1);
					sudoku[zero[0]][zero[1]] = 0;// sudoku(index+1) 에서의 값을 초기화 하기 위해서 필요
					// 초기화 하지 않을 경우 sudoku(index+1)에서의 값이 남아있는 채로 다음 numberChecker에서 오류가 발생함!!! 중요
					// 지금당장을 생각하는것이 아니라 다음 번호출 함수에 어떤 영향을 미칠지 확인 해야함.
					if(check)break;

			}
		}
		return check;

	}

	public static ArrayList<Integer> widthChecker(int[] idx) {
		// idx[0]번을 기준으로 체크
		isVisited = new boolean[10];
		for (int i = 0; i < 9; i++) {
			isVisited[sudoku[idx[0]][i]] = true;
		}
		ArrayList<Integer> numberList = new ArrayList();
		for (int i = 1; i < isVisited.length; i++) {
			if (!isVisited[i]) {
				numberList.add(i);
			}
		}
		return numberList;
	}

	public static ArrayList<Integer> heightChecker(int[] idx) {
		// idx[1]번을 기준으로 체크
		isVisited = new boolean[10];
		for (int i = 0; i < 9; i++) {
			isVisited[sudoku[i][idx[1]]] = true;
		}
		ArrayList<Integer> numberList = new ArrayList();
		for (int i = 1; i < isVisited.length; i++) {
			if (!isVisited[i]) {
				numberList.add(i);
			}
		}
		return numberList;
	}

	public static ArrayList<Integer> areaChecker(int[] idx) {
		isVisited = new boolean[10];
		int x = idx[0] / 3;
		x *= 3;
		int y = idx[1] / 3;
		y *= 3;
		for (int i = x; i < x + 3; i++) {
			for (int j = y; j < y + 3; j++) {
				isVisited[sudoku[i][j]] = true;
			}
		}
		ArrayList<Integer> numberList = new ArrayList();
		for (int i = 1; i < isVisited.length; i++) {
			if (!isVisited[i]) {
				numberList.add(i);
			}
		}
		return numberList;
	}

	public static ArrayList<Integer> numberChecker(int[] zero) {
		ArrayList<Integer> width = widthChecker(zero);
		ArrayList<Integer> height = heightChecker(zero);
		ArrayList<Integer> area = areaChecker(zero);
		int[] number = new int[10];
		ArrayList<Integer> numberList = new ArrayList<Integer>();
		for (int idx : width) {
			number[idx]++;
		}
		for (int idx : height) {
			number[idx]++;
		}
		for (int idx : area) {
			number[idx]++;
		}
		for (int i = 1; i < number.length; i++) {
			if (number[i] == 3) {
				numberList.add(i);
			}
		}
		return numberList;
	}

}
*/
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

class Main {

	static int[][] sudoku;
	static ArrayList<int[]> zeroList;
	static boolean[] isVisited = new boolean[10];
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		sudoku = new int[9][9];// [0~8][0~8]
		zeroList = new ArrayList<int[]>();
		for (int i = 0; i < 9; i++) {// suboku의 값들을 초기화
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < 9; j++) {
				int number = Integer.parseInt(st.nextToken());
				sudoku[i][j] = number;
				if (number == 0) {
					zeroList.add(new int[] { i, j });
				}
			}
		}
		sudoku(0);
		System.out.println(sb);
	}

	public static boolean sudoku(int index) {
		if (index == zeroList.size()) {
			for (int[] target : sudoku) {
				for (int answer : target) {
					sb.append(answer + " ");
				}
				sb.append("\n");
			}
			return true;
		}

		int[] zero = zeroList.get(index);
		ArrayList<Integer> numberList = numberChecker(zero);
		boolean check = false;
		if (numberList.size() != 0) {
			for (int i = 0; i < numberList.size(); i++) {
					sudoku[zero[0]][zero[1]] = numberList.get(i);
					check = sudoku(index + 1);
					sudoku[zero[0]][zero[1]] = 0;// sudoku(index+1) 에서의 값을 초기화 하기 위해서 필요
					// 초기화 하지 않을 경우 sudoku(index+1)에서의 값이 남아있는 채로 다음 numberChecker에서 오류가 발생함!!! 중요
					// 지금당장을 생각하는것이 아니라 다음 번호출 함수에 어떤 영향을 미칠지 확인 해야함.
					if(check)break;

			}
		}
		return check;

	}

	public static ArrayList<Integer> numberChecker(int[] zero) {
		ArrayList<Integer> numberList = new ArrayList<Integer>();
		int[] number = new int[10];
		for (int i = 0; i < 9; i++) {
			isVisited[sudoku[zero[0]][i]] = true;
		}
		for (int i = 1; i < isVisited.length; i++) {
			if(!isVisited[i]) {
				number[i]++;
			}
		}
		Arrays.fill(isVisited, false);
		
		for (int i = 0; i < 9; i++) {
			isVisited[sudoku[i][zero[1]]] = true;
		}
		for (int i = 1; i < isVisited.length; i++) {
			if(!isVisited[i]) {
				number[i]++;
			}
		}
		Arrays.fill(isVisited, false);
		
		int x = zero[0] / 3;
		x *= 3;
		int y = zero[1] / 3;
		y *= 3;
		for (int i = x; i < x + 3; i++) {
			for (int j = y; j < y + 3; j++) {
				isVisited[sudoku[i][j]] = true;
			}
		}
		for (int i = 1; i < isVisited.length; i++) {
			if(!isVisited[i]) {
				number[i]++;
			}
		}
		Arrays.fill(isVisited, false);
		
		for (int i = 1; i < number.length; i++) {
			if (number[i] == 3) {
				numberList.add(i);
			}
		}

		return numberList;
	}

}
/*
코드 수정됨 ArrayList를 주고 받는것 보다 widthChecker(), heightChecker(), areaChecker()를  numberChecker()로 합쳐 하나의 ArrayList만 주고 받는것으로 바꾸어
시간을 단축 시켰습니다.

Arrays.fill()메소드를 이용하는 것과 계속 isVisited = new boolean[10];을 통해 새로운 배열을 생성하는 것 과 시간은 비슷하게 나오나 
메모리 측면에서 Arrays.fill()이 좀더 효율적이었습니다.
*/
