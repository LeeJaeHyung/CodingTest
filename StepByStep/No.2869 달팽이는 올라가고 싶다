/*
문제
땅 위에 달팽이가 있다. 이 달팽이는 높이가 V미터인 나무 막대를 올라갈 것이다.

달팽이는 낮에 A미터 올라갈 수 있다. 하지만, 밤에 잠을 자는 동안 B미터 미끄러진다. 또, 정상에 올라간 후에는 미끄러지지 않는다.

달팽이가 나무 막대를 모두 올라가려면, 며칠이 걸리는지 구하는 프로그램을 작성하시오.

입력
첫째 줄에 세 정수 A, B, V가 공백으로 구분되어서 주어진다. (1 ≤ B < A ≤ V ≤ 1,000,000,000)

출력
첫째 줄에 달팽이가 나무 막대를 모두 올라가는데 며칠이 걸리는지 출력한다.
*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int a = Integer.parseInt(st.nextToken().toString());
		int b = Integer.parseInt(st.nextToken().toString());
		int v = Integer.parseInt(st.nextToken().toString());
		int day = 1+(v-a)/(a-b);
		if((v-a)%(a-b)!=0) {
			day++;
		}
		System.out.println(day);
	}
}


/*
  처음 제출한 풀이는 시간제한을 고려하지 못해 단순하게 문제 그자체를 옮겨 for문으로 아래와 같은 방식으로 풀었습니다.
  
  import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int a = Integer.parseInt(st.nextToken().toString());
		int b = Integer.parseInt(st.nextToken().toString());
		int v = Integer.parseInt(st.nextToken().toString());
		int day = 0;
		int now = 0;
		while(true) {
			day++;
			now += a;
			if(now>=v) {
				break;
			}
			now -= b;
		}
		System.out.println(day);
	}
}
현제의 높이에  a를 더한후 v이보다 같거나 큰지를 확인하고 만약 같거나 크다면  break를 걸었습니다,

하지만 v가 10억까지 커지기 때문에 a와b가 작아지면 for문을 반복하는 횟수가 상당히 증가하게 됩니다.
따라서 수식을 이용하여 맨위의 코드와 같이 풀었습니다.

v-a를 기준으로 잡은 이유는 낮에 오르는 높이 만큼 일단 한번은 오르게 되고 만약 이높이가 v보다 크거나 같은 경우에는 거기서 
더이상 내려가지 않게 되면서 날짜를 새는기준이 바뀌기 때문입니다 .

v-a를 해준후 각각 하루마다 오르는높이는 a-b로 나누어주어 날짜를 새게 되었습니다
만약 나머지가 존재하게 된다면 하루를 더 올라야 함으로 +1이라는 식을 첨가 했습니다.

또한 다른 사람들의 풀이를 보게 되었는데
비슷한 방식이지만 v-b를 하여 풀었는데 이 원리가 어떻게 성립되는지는 알수가 없었습니다.
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {

		Main obj = new Main();
		obj.method();
	}

	void method() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int up = Integer.parseInt(st.nextToken());
		int down = Integer.parseInt(st.nextToken());
		int height = Integer.parseInt(st.nextToken());

		int nowH = (height - down) / (up - down);

		if ((height - down) % (up - down) != 0) {
			nowH++;
		}
		System.out.println(nowH);

//		틀린 코드..
//		 while(true) {
//			if(nowH+up>=height) {
//				System.out.println(cnt);
//				break;
//			}
//			nowH+=realUp;
//			cnt++;
//		}
//		
	}
}




*/
