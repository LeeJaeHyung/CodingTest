/*
문제
상근이의 할머니는 아래 그림과 같이 오래된 다이얼 전화기를 사용한다.



전화를 걸고 싶은 번호가 있다면, 숫자를 하나를 누른 다음에 금속 핀이 있는 곳 까지 시계방향으로 돌려야 한다. 숫자를 하나 누르면 다이얼이 처음 위치로 돌아가고, 다음 숫자를 누르려면 다이얼을 처음 위치에서 다시 돌려야 한다.

숫자 1을 걸려면 총 2초가 필요하다. 1보다 큰 수를 거는데 걸리는 시간은 이보다 더 걸리며, 한 칸 옆에 있는 숫자를 걸기 위해선 1초씩 더 걸린다.

상근이의 할머니는 전화 번호를 각 숫자에 해당하는 문자로 외운다. 즉, 어떤 단어를 걸 때, 각 알파벳에 해당하는 숫자를 걸면 된다. 예를 들어, UNUCIC는 868242와 같다.

할머니가 외운 단어가 주어졌을 때, 이 전화를 걸기 위해서 필요한 최소 시간을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 알파벳 대문자로 이루어진 단어가 주어진다. 단어의 길이는 2보다 크거나 같고, 15보다 작거나 같다.

출력
첫째 줄에 다이얼을 걸기 위해서 필요한 최소 시간을 출력한다.
*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String input = br.readLine();
		int[] check = {68,71,74,77,80,84,87,91};
		int time = 0;
		
		for(int i = 0; i<input.length(); i++) {
			int checkCh = (int)input.charAt(i);
			for(int j = 0; j<check.length; j++) {
				if(check[j]>checkCh) {
					time += j+3;
					break;
				}
			}
		}
		System.out.println(time);
	}
}

/*
위와 같은 방식으로 풀었습니다 입력받은 문자열을 charAt()메소드를 이용하여 해당인덱스에 있는 문자를 가져와서 check라는 int배열에 있는 수와 비교하여 해당 인덱스 범위 보다 작게 되면 걸리는 시간은 인덱스 번호+3초이기 때문에
이것을 총더해 time이라는 변수로 출력 하였습니다.

다른 사람들은 아래와 같이 풀었습니다.
import java.io.*;
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String str = br.readLine();
        int total = 0;

        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) <= 'C') total += 2;
            else if (str.charAt(i) <= 'F') total += 3;
            else if (str.charAt(i) <= 'I') total += 4;
            else if (str.charAt(i) <= 'L') total += 5;
            else if (str.charAt(i) <= 'O') total += 6;
            else if (str.charAt(i) <= 'S') total += 7;
            else if (str.charAt(i) <= 'V') total += 8;
            else if (str.charAt(i) <= 'Z') total += 9;
        }
        System.out.println(total + str.length());
    }
}
for 문안에 if문을 사용하여 해당 알파벳들을 하나하나씩 비교해 나갔습니다


import java.io.IOException;

public class Main {

    public static void main(String[] args) throws IOException {

        int word = System.in.read();
        int count = 0;
        while(true){

            if(word>64 && word<=79){
                for(int i=1; i<6; i++){
                    if(word < 65+(3*i)){
                        count += 2 + i;
                        break;
                    }
                }
            }

            if(word>79 && word<=83){
                count += 8;
            }

            if(word>83 && word<=86){
                count += 9;
            }

            if(word>86 && word<=90){
                count += 10;
            }

            if(word == 10){break;}

            word = System.in.read();
        }

        System.out.println(count);
    }
  위의 코드는 제가 풀은 방식과 비슷하게 System.in.read()를 이용하여 아스키 코드값으로 비교하여 
  체크하였습니다. 방식이 조금 비효율적인거 같습니다

*/
