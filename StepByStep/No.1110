/*
0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다.
먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다.
그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. 
다음 예를 보자.
26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.
위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.
N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.
*/





package com.backjoon.test;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String start = br.readLine();
		br.close();
		int check = Integer.parseInt(start);
		int now = 0;
		int before = 0;
		int count = 0;
		int sum = 0;
		
		if(start.length()==1) {
			before = check;
			now = check*10+check;
			sum = check;
			count++;
		}else {
			now = check;
			before = check%10;
			sum = (check-before)/10+before;
			now = before*10+sum%10;
			count++;
		}
		while(check!=now){
			before = now%10;
			sum = ((now-before)/10)+before;
			now = before*10+sum%10;
			count++;
		}
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		bw.write(count+"");
		bw.flush();
		bw.close();
	}
}

//     Memorry	14236KB	RunTime 132ms

/*
       위의 문제를 풀면서 어려웠던 점은 처음 시작하는 수의 계산 방식이었습니다.
       while문의 조건문을 위와 같이 check!=check 로 설정하여 while문을 돌리게되면 
       start < 10 와같이 입력이 들어오게 되면 while문을 구동하지 못하게 됩니다.
       따라서 처음에 while문전에 start값을 처리한후에 while문을 돌리는 방식으로 코드를 작성하게 되었습니다.
       하지만 다른 분들의 코드를 확인해 본결과  do while문을 사용하여 처리하여 사전의 방식을 거치지 않고도 
       while문의 조건식이 start<10 인경우에도 while 문을 정상적으로 작동하게 할 수있을수 있었습니다.
       
       문제를 읽고서 공통되는 부분을 줄이려는 생각을 해보지 않아 단순하게 각 조건들을 차례대로 처리하게 되었습니다.
       
       다른 분들의 문제의 답안을 본후에는 위의 처음의 수를 처리하는 과정이 나머지 처리과정에서도 동일하게 적용된다는 사실을 알게 되었습니다.
       남들과 같은 과정을 처리하면서 똑같은 과정을 여러 가지 경우로 나누어 처리하는 과정에서 처리속도가 떨어지게 되고 코드내용의 길이가 길어지게 되었습니다.
       
       다음의 코드를 작성하게 될땐 공통되는 부분을 최소화 하고 코드를 작성하는 것을 목표로 생가겠습니다.
       
       수정된 코드 
       package com.backjoon.test;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine()); //처음으로 입력받은 수를 변수로 지정 
		br.close();
		int startNumber = n;
		int count = 0;
		
		// do while문은 먼저 do의 내용을 실행한 후에  while 문의 조건식을 만족하는지 확인하게 된다 
		// 일반 while문은 조건식을 확인한후에 while 문을 실행하게된다.
		do {           
			System.out.println("받은숫자 : "+n);
			System.out.println("새로운 숫자의 10의 자리 :"+(n%10)*10);
			System.out.println("새로운 숫자의 1의 자리 : "+(((n-n%10)/10)+n%10)%10);
			n =((n%10)*10)/*1의 자리 숫자*10*/+(((n-n%10)/10)+n%10)%10/*10의자리와 1의 자리를 더한값*/; //위 문제의 모든 조건식은 하나로 통일 되어질 수있다
			// newNumber = newNumber%10*10+((newNumber-newNumber%10)/10)+(newNumber%10))%10<문제의 처리과정중 합에 대한 내용에 해당
			// 처음 문제를 처리하는 과정보다 하나의 과정으로 통합하게 되어 코드의 내용이 간단해졌다
			count++;
			System.out.println("새로운 숫자 : "+n);
		}
		while(startNumber!=n);
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		bw.write(count+"");
		bw.flush();
		bw.close();
	}
}

package com.backjoon.test;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		br.close();
		int startNumber = n;
		int count = 0;

		do {           
			n = n%10*10 + (n/10+n%10)%10;
			count++;
		}
		while(startNumber!=n);
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		bw.write(count+"");
		bw.flush();
		bw.close();
	}
}

최종 수정된 코드내용을 보면 이러하다

	
*/




