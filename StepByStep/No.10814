/*
문제
온라인 저지에 가입한 사람들의 나이와 이름이 가입한 순서대로 주어진다. 이때, 회원들을 나이가 증가하는 순으로, 나이가 같으면 먼저 가입한 사람이 앞에 오는 순서로 정렬하는 프로그램을 작성하시오.

입력
첫째 줄에 온라인 저지 회원의 수 N이 주어진다. (1 ≤ N ≤ 100,000)

둘째 줄부터 N개의 줄에는 각 회원의 나이와 이름이 공백으로 구분되어 주어진다. 나이는 1보다 크거나 같으며, 200보다 작거나 같은 정수이고, 이름은 알파벳 대소문자로 이루어져 있고, 길이가 100보다 작거나 같은 문자열이다. 입력은 가입한 순서로 주어진다.

출력
첫째 줄부터 총 N개의 줄에 걸쳐 온라인 저지 회원을 나이 순, 나이가 같으면 가입한 순으로 한 줄에 한 명씩 나이와 이름을 공백으로 구분해 출력한다.
*/

/*
  풀이 :  나의 풀이 방법 - 병합정렬
          1.받은 입력을 String[][]에 StringTokenizer를 이용하여 값을 대입 시킴
          2.병합정렬은 분할된 배열중 왼쪽배열과 오른쪽배열의 값이 같을 경우 왼쪽의 값을 임시저장공간에 저장할 경우 안정된정렬이 가능합니다.
            따라서 병합정렬을 이용하여 문제를 풀었습니다.
            
          다른 분의 코드리뷰를 통한 방식 - 계수 정렬
          1. 나이는 200 까지 있음으로 StringBuilder를 크기[201]의 배열로 선언한후
          2. StringBuilder[나이]에 sb.append()메소들 이용하여 값을 쌓은후
          3. StringBuilder배열에 모두 방문하여 출력하게 되면 자연적으로 안정된 정렬이 완료 됩니다.
          
          <배운점>
          병합정렬(mergeSort)에서 분할된 배열 왼쪽과 오른쪽의 값이 같을때는 왼쪽의 값만 임시 저장공간에 저장함으로 안정된정렬이 가능합니다.
          String타입의 데이터를 StringBuilder를 이용하여 계수 정렬시 안정된정렬이 가능합니다.
          
*/
//<1번 코드>
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Main {
	static String[][] subArr;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		int N = Integer.parseInt(br.readLine());
		String[][] input = new String[N][2];
		subArr = new String[N][];
		for (int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			input[i][0] = st.nextToken();
			input[i][1] = st.nextToken();
		}
		
		mergeSort(input);

		for (String[] answer : input) {
			sb.append(answer[0]).append(" ").append(answer[1]).append("\n");
		}
		System.out.println(sb);
	}

	public static void mergeSort(String[][] input) {
		mergeSort(input, 0, input.length - 1);
	}

	public static void mergeSort(String[][] input, int start, int end) {
		if (start < end) {
			int mid = (start + end) / 2;
			mergeSort(input, start, mid);
			mergeSort(input, mid + 1, end);
			merge(input, start, mid, end);
		}
	}

	public static void merge(String[][] input, int start, int mid, int end) {
		int left = start;
		int right = mid + 1;
		int count = 0;

		while (left <= mid && right <= end) {
			if (input[left][0].equals(input[right][0])) {// 나이가 같을 때
				subArr[count++] = input[left++];
			} else {// 나이가 다른 시점
				if (Integer.parseInt(input[left][0]) < Integer.parseInt(input[right][0])) {
					subArr[count++] = input[left++];
				} else {
					subArr[count++] = input[right++];
				}
			}
		}
		while (left <= mid) {
			subArr[count++] = input[left++];
		}
		while (right <= end) {
			subArr[count++] = input[right++];
		}

		for (int i = 0; i < count; i++) {
			input[i + start] = subArr[i];
		}

	}
}
