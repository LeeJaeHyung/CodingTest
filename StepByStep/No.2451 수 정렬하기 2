/*
수 정렬하기 2
 
시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
2 초	256 MB	176416	49156	33759	30.218%
문제
N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.

입력
첫째 줄에 수의 개수 N(1 ≤ N ≤ 1,000,000)이 주어진다. 둘째 줄부터 N개의 줄에는 수가 주어진다. 이 수는 절댓값이 1,000,000보다 작거나 같은 정수이다. 수는 중복되지 않는다.

출력
첫째 줄부터 N개의 줄에 오름차순으로 정렬한 결과를 한 줄에 하나씩 출력한다.
*/

/*
 풀이 : 병합정렬(mergeSort)을 이용하여 풀었습니다.
        병합정렬은 입력값을 배열에 담고 모든 배열을 분해하여 재귀적으로 호출하는 과정에서 해당 값들을 병합 하며 정렬하는 방식입니다
        
        1. 모든 값들을 arr에 대입 
        2. mergeSort(arr); 호출
        3. mergeSort(arr, 0, arr.length-1);
        4. mergeSort(int[] arr, start, end){
            start < end 라면 재귀 호출을 통해
             mergeSort(int[] arr, start, mid)// start~ mid 까지 분할
             mergeSort(int[] arr, mid+1, end)// mid+1~ end 까지 분할
             
             병합과정
             
             left, right 라는 정수형 값을 포인터로 이용
             해당 값들을 비교하여 
             
             left<=mid&&right<=end라는 조건식을 통해 
             while문을 동작
             
             arr[left]<arr[right]?subArr[count++]=arr[left++]:subArr[count++]=arr[right++];
             라는 조건식을 통해 카운트하며 arr[left] 와 arr[right]중 작은 값을 subArr에 대입
             
             이후에 left 나 right 둘중 남은 값을 모조리 
             대입 하는 과정을 통하여 나머지 값들을 subArr에 대입하여 주고
             
             arr[start]~arr[start+count]까지 subArr의 값들을 순차적으로 대입하여 정렬을 완료 하였습니다.
           }
*/

import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main{
	
	static int[] subArr;
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		int[] arr = new int[n];
		subArr = new int[n]; // mergeSort 에서 이용할 임시 공간
		
		//배열 초기화
		for(int i = 0; i < n; i++) {
			arr[i] = Integer.parseInt(br.readLine());
		}
		
		mergeSort(arr);
		
		for(int out : arr) {
			sb.append(out).append("\n");
		}
		
		System.out.println(sb);
	}
	
	public static void mergeSort(int[] arr) {
		mergeSort(arr, 0, arr.length-1);
	}
	
	public static void mergeSort(int[] arr, int start, int end) {
		if(start<end) {// start==end가 되는 순간 재귀호출을 종료 하기위하여
			int mid = (start+end)/2;
			
			mergeSort(arr, start, mid);// start~mid 까지 정렬 
			mergeSort(arr, mid+1, end);// mid+1~end 까지 정렬
			
			int left = start;
			int right = mid+1;
			int count = 0;
			
			while(left<=mid&&right<=end) {// left 와 right 중 작은 것을 왼쪽에서 부터 subArr에 쌓음
				if(arr[left]<arr[right]) {
					subArr[count++] = arr[left++]; 
				}else {
					subArr[count++] = arr[right++];
				}
			}
			
			//위의 정렬 과정에서 남은 것을 처리해 주는 과정
			if(left<=mid) {
				while(left<=mid) {
					subArr[count++] = arr[left++];
				}
			} 
			else{
				while(right<=end) {
					subArr[count++] = arr[right++];
				}
			}
			
			for(int i = 0; i<count; i++) {
				arr[start+i] = subArr[i];
			}
		}
	}
}
