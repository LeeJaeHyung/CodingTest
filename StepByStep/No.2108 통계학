/*
    통계학 성공

    시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
    2 초	256 MB	84150	16475	13416	25.491%
    문제
    수를 처리하는 것은 통계학에서 상당히 중요한 일이다. 통계학에서 N개의 수를 대표하는 기본 통계값에는 다음과 같은 것들이 있다. 단, N은 홀수라고 가정하자.

    산술평균 : N개의 수들의 합을 N으로 나눈 값
    중앙값 : N개의 수들을 증가하는 순서로 나열했을 경우 그 중앙에 위치하는 값
    최빈값 : N개의 수들 중 가장 많이 나타나는 값
    범위 : N개의 수들 중 최댓값과 최솟값의 차이
    N개의 수가 주어졌을 때, 네 가지 기본 통계값을 구하는 프로그램을 작성하시오.

    입력
    첫째 줄에 수의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 단, N은 홀수이다. 그 다음 N개의 줄에는 정수들이 주어진다. 입력되는 정수의 절댓값은 4,000을 넘지 않는다.

    출력
    첫째 줄에는 산술평균을 출력한다. 소수점 이하 첫째 자리에서 반올림한 값을 출력한다.

    둘째 줄에는 중앙값을 출력한다.

    셋째 줄에는 최빈값을 출력한다. 여러 개 있을 때에는 최빈값 중 두 번째로 작은 값을 출력한다.

    넷째 줄에는 범위를 출력한다.
*/


/*
  풀이 :  값의 범위가 좁고 중복으로 등장할수 있기에 계수정렬을 이용하였습니다.
          1. 산술평균을 구하는 법 : 산술 평균을 구하기위해 계수정렬의 경우에서 해당 인덱스에 count만큼 int sum에 반복문 안에서 sum=i*input[i]을 이용하여 총합을 구한후
                                  N으로 나누어 준후 avg에 대입 avg를 Math.round()함수를 이용하여 반올림 하여 값을 구하였습니다
          2. 중앙값을 구하는 법 : 중앙값은 반복문을 들어올때 마다 count를 beforCount에 대입한 후  input[i]의 개수 만큼 증가시켜 주었습니다.
                                중앙에 위치할시 mid==count거나 이전의 카운트 보다 중앙의 수가 크고 중앙의 수보다 지금 카운트가 같은경우 이두가지 입니다 두가지중 하나라도
                                참인경우 해당수가 중앙에 위치하는 수 인지를 확인할 수 있습니다 
                                따라서 경우의 수에서 mid에 위치하는 수를 구하려면 count==mid||(beforCount<mid&&mid<count)로 해당 수가 중앙에 위치 하는지 알 수 있습니다.
                                
                                
          3. 최빈값을 구하는 법 : 최빈값은 제일 많이 등장 한 수를 찾는 것이고 가장 많이 등장한 수가 등장할 경우에는 작은수부터 두번째 수이기 때문에 
                                반복문을 반복하면서 mode라는 변수를 이용하여 이전수의 발생한 수를 집어 넣고 지금 비교하는 값의 보다 큰지를 확인하여 최빈수를 구분하였습니다.
                                크다면 최빈수의 반복횟수를 mode에 대입 하고 해당 수를 modeNum에 대입 하였습니다.
                                새로 최빈수가 발생하였다면 이전의 최빈수의 count와 secondeModeNum을 초기 값으로 갱신하여 주었습니다
                                
                                그리고 이후에 조건문에서 이전의 mode값과 현제 인덱스의 값을 비교하여 같다면 modeCount를 증가 시켜 주고 
                                만약 modeCount가 2라면 secondeModeNum을 갱신하여 주었습니다.
                 
          4.범위값을 구하는 법은 : 반복문에서 처음 if문을 들어오게 되면 해당 수는 가장 작은 값이므로 minNum에 넣어주고 
                                 maxNum에 계속하여 값을 갱신하여 최대 값을 구하였습니다
                                 두수 모두 양수이므로 큰값에서 작은 값을 빼 주어 범위값을 구하였습니다
  !!!!! 고생했던점 !!!!! :  아무 생각 없이 secondeModeNum을 0으로 계속 초기화 시켜 주었는데 StringBuilder에 쌓는 과정에서 
                           sb.append((secondeModeNum==0?modeNum:secondeModeNum)+"\n");
                           방식으로 쌓았기 때문에 해당 최빈수 중복상황에서  두번째 최빈수의 값이 0일때는 그냥 modeNum을 출력 해버리는 실수를 하였습니다.
                           앞으로는 초기화값이 해당수의 경우의 수의 범위에 들지 않게 해야 겠습니다
                                 
*/

import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		int N = Integer.parseInt(br.readLine());
		int[] input = new int[8001];
		
		for(int i = 0; i<N; i++) {
			int nowNum = Integer.parseInt(br.readLine());
			input[nowNum+4000]++;
		}
		
		double sum = 0;
		double avg = 0;
		int mid = N/2+1;
		int midNum = 0;
		int count = 0;
		int mode = 0;
		int modeNum = 0;
		int modeCount = 0;
		int secondeModeNum = -8000;
		int minNum = 0;
		int maxNum = 0;
		
		for(int i = 0; i < input.length; i++) {
			if(input[i]>0) {
				sum += (i-4000)*input[i];
				int beforCount = count;
				count+=input[i];
				if(count==mid||(beforCount<mid&&mid<count)) {
					midNum = i-4000;
				}
				if(mode<input[i]) {
					mode = input[i];
					modeNum = i;
					secondeModeNum = -8000;
					modeCount = 0;
				}
				if(mode==input[i]) {
					modeCount++;
					if(modeCount==2) secondeModeNum = i-4000;
				}
				
				if(beforCount==0) {
					minNum = i;
				}
				if(maxNum<i) {
					maxNum = i;
				}
			}
		}
		
		modeNum -= 4000;
		avg = sum/N;
		sb.append(Math.round(avg)+"\n");
		sb.append(midNum+"\n");
		sb.append((secondeModeNum==-8000?modeNum:secondeModeNum)+"\n");
		sb.append((maxNum-minNum)+"\n");
		
		System.out.println(sb);
	}
}
