/*
      쉬운 계단 수 성공

      시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
      1 초	256 MB	101787	31796	22818	29.355%
      문제
      45656이란 수를 보자.

      이 수는 인접한 모든 자리의 차이가 1이다. 이런 수를 계단 수라고 한다.

      N이 주어질 때, 길이가 N인 계단 수가 총 몇 개 있는지 구해보자. 0으로 시작하는 수는 계단수가 아니다.

      입력
      첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 100보다 작거나 같은 자연수이다.

      출력
      첫째 줄에 정답을 1,000,000,000으로 나눈 나머지를 출력한다.
*/
/*
      풀이  : 
              numberCount의 인덱스 번호 (기존 수) [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
              1. 0으로 시작할 수는 없음으로 0은 0의 값을 가지고 나머지 수들은 모두 존재할 수 있습니다 따라서 1을 초기 값으로 시작하였습니다
              2. 각 인덱스로 앞의 수가 끝났다고 보면 뒤에 자리에 올 수 있는 경우는 
                 [0 -> 1] [1 -> 0, 2] [2 -> 1, 3] [3 -> 2, 4] [4 -> 3, 5] [5 -> 4, 6] [6 -> 5, 7] [7 -> 6, 8] [8 -> 7, 9] [9 -> 8]
                 와 같이 구성이 됩니다 따라서 0 인 경우에는 1 의 수를 0 의 수 만큼 늘려주고
                 9 인 경우에는 8 의 수를 9의 수 만큼 늘려주고 10억으로 나눈 나머지를 가지고 있습니다.
                 나머지 경우에는 현제 방문하고 있는 인덱스 번호를 j 라고 하면 j-1 과 j+1에 j만큼의 수를 각각 더해주게 되고
              3. 마지막으로 numberCount에 남은 수들을 모두 더해주면 계단 수의 개수를 새는 알고리즘이 완성됩니다
              
              점화식 =>  subCount[j - 1] = (subCount[j-1] + numberCount[j])%1000000000;
                        subCount[j + 1] = (subCount[j+1] + numberCount[j])%1000000000;
                        
                        0번 인덱스와 9번 인덱스만 if문을 통해 다르게 증가 시킵니다
              
              다른 분이 푸신 방법은 
              [2][12]의 크기를 가지는 dp테이블을 선언하여 0 과 9를 구분하지 않고 하나의 2차원 배열을 사용하였습니다.
              또한 제가 풀은 코드에서는 subCount를 첫 번째 for문을 반복할때마다 새로운 배열을 선언하는 것에 반해
              i = (반복횟수 + 1)%2; j = 반복횟수%2;로 하여 dp[0]과 dp[1]이 반복횟수가 증가함에 따라 동적으로 제코드에 subCount와 numberCount의 역할을 하게 하였습니다
              다른 분이 푸신 방법을 보고 이런 방법도 있구나 하며 신기하였습니다.
              메모리와 속도는 거의 비슷합니다.
              
              이번 문제를 풀면서 드디어 스스로도 점화식을 만드는 방법을 깨달았습니다.
                 
              
*/
import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main {

	static int N;
	static int[] numberCount = new int[] { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
	static int[] subCount;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		if (N == 1) {
			System.out.println(9);
		} else {
			System.out.println(solution());
		}

	}

	public static long solution() {
		int count = 0;
		for (int i = 1; i < N; i++) {
			subCount = new int[10];
			for (int j = 0; j < numberCount.length; j++) {
				if (j == 0) {
					subCount[1] = (subCount[1] + numberCount[j])%1000000000;
				} else if (j == 9) {
					subCount[8] = (subCount[8] + numberCount[j])%1000000000;
				} else {
					subCount[j - 1] = (subCount[j-1] + numberCount[j])%1000000000;
					subCount[j + 1] = (subCount[j+1] + numberCount[j])%1000000000;
				}
			}
			numberCount = subCount;
		}
		for (int i = 0; i < numberCount.length; i++) {
			count = (count + numberCount[i])%1000000000;
		}
		return count;

	}
}
