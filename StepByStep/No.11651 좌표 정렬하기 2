/*
좌표 정렬하기 2 성공
 
시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
1 초	256 MB	38421	24913	21154	67.991%

문제
2차원 평면 위의 점 N개가 주어진다. 좌표를 y좌표가 증가하는 순으로, y좌표가 같으면 x좌표가 증가하는 순서로 정렬한 다음 출력하는 프로그램을 작성하시오.

입력
첫째 줄에 점의 개수 N (1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N개의 줄에는 i번점의 위치 xi와 yi가 주어진다. (-100,000 ≤ xi, yi ≤ 100,000) 좌표는 항상 정수이고, 위치가 같은 두 점은 없다.

출력
첫째 줄부터 N개의 줄에 점을 정렬한 결과를 출력한다.

*/

/*
  풀이 : 병합 정렬을 이용하여 풀었습니다.
    
          1. N의 입력을 받고 arr[N][2] 와 subArr[N][2]의 배열을 생성
          2. StringTokenizer를 이용하여 arr[N]에 0번 인덱스에 입력 받은 x값 대입 , 1번 인덱스에 입력받은 y값 대입
          3. 병합 정렬을 하는 mergeSort(int[][] arr, n-1)을 호출
          4. mergeSort(int[][] arr, n-1)이 Override된 mergeSort(int[][]arr, 0, n)를 호출
          5. 정의된 mergeSort(int[][] arr, int start, int end)를 호출
          6. 재귀 호출을 통해 int mid = (start+end)/2; mergerSort(arr, start, mid)와 mergeSort(arr, mid+1, end)를 호출
          7. 위의 과정을 통해 재귀적 처리에 의해 arr[start]~arr[mid] 까지 정렬 되어있고  arr[mid+1]~arr[end] 까지 정렬 돼있음으로 병합 하는과정을 처리
          8. int left 와 int right 를 포인터를 이용하여 첫번째 while문에서 right와 left 둘중 하나라도 start나 end의 범위를 벗어 날때 까지 subArr에 작은 순으로 쌓는과정을 거침
          9. 위의 과정을 통해 나왔을겨우 left 와  right 중 하나는 남은 배열이 있을것이다 따라서 이중 남은 배열을 처리하는 과정을 거침
          10. arr[start+i] = subArr[i];를 통해 arr 에 subArr의 주소값을 대입
          11. 마지막 main메소드로 돌아와 StringBuilder에 쌓아 출력 하였습니다.

*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Main {
	
	static int[][] subArr;
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		int N = Integer.parseInt(br.readLine());
		StringTokenizer st;
		int[][] input = new int[N][2];// 값들을 저장할 2중배열
		subArr = new int[N][2];
		for (int i = 0; i < N; i++) { //input[i][0] = x좌표값 , input[i][1] = y좌표값 
			st = new StringTokenizer(br.readLine());
			input[i][0] = Integer.parseInt(st.nextToken());
			input[i][1] = Integer.parseInt(st.nextToken());
		}
		
		//병합 정렬을 이용하여 정렬
		mergeSort(input,N-1);
		
		for(int[] answer : input) {
			sb.append(answer[0]+" "+answer[1]+"\n");
		}
		
		System.out.println(sb);

	}
	
	public static void mergeSort(int[][] arr, int n) {
		mergeSort(arr, 0, n);
	}
	
	public static void mergeSort(int[][] arr, int start, int end) {
		if(start<end) {
			int mid = (end+start)/2;
			mergeSort(arr, start, mid);
			mergeSort(arr, mid+1, end);
			
			int left = start;
			int right = mid+1;
			int count = 0;
			
			while(left<=mid&&right<=end) {//left right둘중 하나라도 포인터가 범위를 벗어 날때 까지 반복
				if(arr[left][1] < arr[right][1]) {//좌측 y좌표가 우측 y좌표 보다 작은 경우
					subArr[count] = arr[left];
					count++;
					left++;
				}else if(arr[left][1]>arr[right][1]) {//좌측 y좌표가 우측 y좌표 보다 큰 경우
					subArr[count] = arr[right];
					count++;
					right++;
				}else {//좌측과 우측 y좌표가 같은경우
					if(arr[left][0]<arr[right][0]) {
						subArr[count] = arr[left];
						count++;
						left++;
					}else {
						subArr[count] = arr[right];
						count++;
						right++;
					}
				}
			}
			
			if(left<=mid) {//좌측 배열의 포인터가 끝까지 가지 않는경우
				while(left<=mid) {
					subArr[count] = arr[left];
					count++;
					left++;
				}
				
			}
			if(right<=end) {//좌측 배열의 포인터가 끝까지 가지 않는경우
				while(right<=end) {
					subArr[count] = arr[right];
					count++;
					right++;
				}
			}
			
			for(int i = 0; i < count; i++) {//subArr에 있는 정렬돼있는 값을 arr에 대입
				arr[start+i] = subArr[i];
			}
			
			
		}
	}
}
