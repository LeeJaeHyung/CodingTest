/*
  문제
  지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M×N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8×8 크기의 체스판으로 만들려고 한다.

  체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.

  보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 8×8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 8*8 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.

  입력
  첫째 줄에 N과 M이 주어진다. N과 M은 8보다 크거나 같고, 50보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.

  출력
  첫째 줄에 지민이가 다시 칠해야 하는 정사각형 개수의 최솟값을 출력한다.
*/

/*
  풀이 :  N과 M을 입력 받고 -7을 하여  가로반복횟수 widthLoopCount와 heigthLoopCount를 변수로 만들어
          for문을 통해 해당 횟수만큼 가로줄 세로줄을 +1 씩 인덱스를 증가시켜 checker(int width, int height)를 호출하였습니다.
          
          처음에 시작한 풀이에서는 왼쪽위가 'W'일때와 'B'일때의 개별적으로 countB, countW를 각각 구했는데
          나중에 다른 분들의 코드 리뷰를 통해 'W'나 'B'중 하나의 count를 구하고 해당 카운트를 64에서 빼주면 다른 반대의 카운트를 구할수 있는 것이었습니다
          
          또한 answer를 클래스변수로 선언하여 모든 구간에서 조작할수있게 끔 하고 Math.min(int x, int y)메소드를 이용하여 최소값을 구해 answer에 대입하였습니다.
          
  느낀점 : for 문을통해 두가지 경우의 수를 체크 해야할경우 ! 하나의 값과 연관되어 있는 값이라면 하나의 경우의 수만 구한후 변환 시켜 대입하는것이 효과적이라는 점을 깨달았습니다.
           Math.min()메소드를 통해 작은값을 보다 간결하게 할수있다는 것을 배웠습니다.
*/




/* 코드 */
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	
	static boolean[][] target;
	static int answer=64;
	
	public static void main(String[] args) throws Exception{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());

		target = new boolean[n][m];
		
		int widthLoopCount = n-7;
		int heightLoopCount = m-7;
		
		//입력을 배열에 대입
		
		//'B'=true 'W'=false
		
		for(int i = 0; i<n; i++) {
			
			String board = br.readLine();
			for(int j = 0; j<m; j++) {
				if(board.charAt(j)=='B') {
					target[i][j] = true;
				}else {
					target[i][j] = false;
				}
			}
		}
		
		//하나의 루프에서 동시에 카운트를 샌다
		//출력중 제일 적은 카운트를 새는것만 남기고 나머지 탐색을 계속한다
		
		// 여기서 이제 반복만 지정
		for(int i=0; i<heightLoopCount; i++) {
			for(int j=0; j<widthLoopCount; j++) {
				checker(i,j);
			}
		}
		
		System.out.println(answer);
		
	}
	
	
	public static void checker(int width, int height) {
		
		boolean criteria = true;
//		int countB = 0;
		int countW = 0;
		
		for(int i = height; i<height+8; i++) {
			for(int j = width; j<width+8; j++) {
				if(criteria==target[i][j]) {
					countW++;
				}
//				else {
//					countB++;
//				}
				criteria = !criteria;
			}
			criteria = !criteria;
		}
		
		answer = Math.min(Math.min(countW,64-countW),answer);
//		if(countW>countB) {
//			if(answer>countB) {
//				answer = countB;
//			}
//		}else {
//			if(answer>countW) {
//				answer = countW;
//			}
//		}
		
		
		
	}
}
