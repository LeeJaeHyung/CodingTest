/*
    소트인사이드
    
    문제
    배열을 정렬하는 것은 쉽다. 수가 주어지면, 그 수의 각 자리수를 내림차순으로 정렬해보자.

    입력
    첫째 줄에 정렬하려고 하는 수 N이 주어진다. N은 1,000,000,000보다 작거나 같은 자연수이다.

    출력
    첫째 줄에 자리수를 내림차순으로 정렬한 수를 출력한다.
*/

/*
  풀이 : 입력값의 범위가 int범위 안에 포함 되며 각각 인덱스의 값의 범위는 0~9 까지 이므로 계수정렬을 이용하여 풀었습니다.
         int[]로 크기 10으로 배열을 생성하면 해당 인덱스는 0~9까지 임으로 해당 인덱스의 값을 증가 시키며 해당 수의 갯수를 카운트 하였습니다.
         BufferedWriter에 wirte()함수를 이용하여 buffer에 값을 쌓았고 쌓을때는 9번 인덱스의 값부터 읽어 내림차순으로 정렬하여 출력하였습니다.
         해당 값들은 char형식의 값들임으로 48을 더하거나 뺌으로 int형 리터럴을 char형의 리터럴 값으로 변경시켜 주었습니다.
        
  알게된 점 : int -> char는 -48       char -> int는 +48 을해주면 서로 형변환을 편하게 할수 있습니다.
*/


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

class Main{
	
	public static void main(String[] args) throws Exception{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		String N = br.readLine();
		br.
		int[] answer = new int[10];
		for(int i = 0; i < N.length(); i++) {
			answer[N.charAt(i)-48]++;
			
		}
		for(int i = answer.length-1; i > -1; i--) {
			for(int j = 0; j<answer[i]; j++) {
				bw.write(i+48);
			}
		}
		bw.flush();
		bw.close();
	}
	
}
