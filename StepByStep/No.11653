/*
문제
정수 N이 주어졌을 때, 소인수분해하는 프로그램을 작성하시오.

입력
첫째 줄에 정수 N (1 ≤ N ≤ 10,000,000)이 주어진다.

출력
N의 소인수분해 결과를 한 줄에 하나씩 오름차순으로 출력한다. N이 1인 경우 아무것도 출력하지 않는다.
*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		int n = Integer.parseInt(br.readLine());
		boolean loop = true;
		if (n != 1) {
			while (loop) {
				for (int i = 2; i <= n; i++) {
					if (n == i) {
						sb.append(i);
						loop = false;
						break;
					}
					if (n % i == 0) {
						n = n / i;
						sb.append(i + " ");
						loop = true;
						break;
					}
				}
			}
			StringTokenizer st = new StringTokenizer(sb.toString());
			while (st.countTokens() != 0) {
				System.out.println(st.nextToken());
			}

		}

	}
}

/*
위의 방식처럼 while문의 loop라는 boolean형 변수를 주고  두가지 조건으로  ture flase로 변경하여 문제를 풀었습니다.
loop가  ture나 false로 변경되면 해당 i를 StringBuilder를 이용하여 문자열으로 만들고  StringTokenizer로 분할하여 출력하였습니다.

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Main {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int N = Integer.parseInt(br.readLine());
		
		for(int i=2; i*i<=N; i++){
			while(N%i == 0){
				System.out.println(i);
				N  = N / i;
			}
		}
		
		if(N>1){
			System.out.println(N);
		}
		
	}

}

다른 분이 작성한 코드를 보면 훨씬 간단하게 푸셨습니다.
i*i 범위가 된이유는 소수는 자기 자신의 sqrt/*루트*/보다 큰수는 약수로 가질수 없기 때문입니다.

*/
