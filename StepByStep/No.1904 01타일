/*
    문제
    지원이에게 2진 수열을 가르쳐 주기 위해, 지원이 아버지는 그에게 타일들을 선물해주셨다. 그리고 이 각각의 타일들은 0 또는 1이 쓰여 있는 낱장의 타일들이다.

    어느 날 짓궂은 동주가 지원이의 공부를 방해하기 위해 0이 쓰여진 낱장의 타일들을 붙여서 한 쌍으로 이루어진 00 타일들을 만들었다. 결국 현재 1 하나만으로 이루어진 타일 또는 0타일을 두 개 붙인 한 쌍의 00타일들만이 남게 되었다.

    그러므로 지원이는 타일로 더 이상 크기가 N인 모든 2진 수열을 만들 수 없게 되었다. 예를 들어, N=1일 때 1만 만들 수 있고, N=2일 때는 00, 11을 만들 수 있다. (01, 10은 만들 수 없게 되었다.) 또한 N=4일 때는 0011, 0000, 1001, 1100, 1111 등 총 5개의 2진 수열을 만들 수 있다.

    우리의 목표는 N이 주어졌을 때 지원이가 만들 수 있는 모든 가짓수를 세는 것이다. 단 타일들은 무한히 많은 것으로 가정하자.

    입력
    첫 번째 줄에 자연수 N이 주어진다. (1 ≤ N ≤ 1,000,000)

    출력
    첫 번째 줄에 지원이가 만들 수 있는 길이가 N인 모든 2진 수열의 개수를 15746으로 나눈 나머지를 출력한다.
*/


/*

풀이 : DP는 Problem의 답을 유출할수있는값인 subProblem의 합으로 이루어진 경우에이  subProblem들의 값들을 저장 해두었다가 더큰 problem들의 subproblem으로 이용하여 
       연산과정과 속도를 줄일수있는 방식입니다.
       
       처음에는 값을 직접 구하는 solution을 만들어 값들의 관계를 확인하였습니다.
       한지만 이 solution함수는 불필요한 연산을 지속적으로 반복하여 시간이 오래 걸립니다.
        static int N;
        static int answer = 0;
        public static void solution(int size) {
          if(size<N) {
            return;
          }
          if(size == N) {
            answer++;
          }
          solution(size+1);
          solution(size+2);

        }
        
        N=1 => answer=1
        N=2 => answer=2
        N=3 => answer=3
        N=4 => answer=5
        N=5 => answer=8
        N=6 => answer=13
       
        N => N-1 + N-2 라는것을 확인 하였습니다.
       
       정답을 유추하는 과정에서 dp로 해결이 가능한 문제들은 직접 한번씩 값들을 풀어보고 해당 값들 사이에서 연관 관계를 구하여야 하는 것이 우선이라는것을 알았습니다.
       

*/
//<코드>
import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main {
	static int N;
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
	  count(N);
	}
	
	public static void count(int loopCount) {
		//Bottom Up
		
		int before1 = 0;
		int before2 = 1;
		
		for(int i = 0; i<loopCount; i++) {
			int sub = before2;
			before2 = (before1+before2)%15746;
			before1 = sub;
		}
		
		System.out.println(before2);
	}
}
