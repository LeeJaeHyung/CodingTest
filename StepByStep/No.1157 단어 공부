/*
문제
알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 단, 대문자와 소문자를 구분하지 않는다.

입력
첫째 줄에 알파벳 대소문자로 이루어진 단어가 주어진다. 주어지는 단어의 길이는 1,000,000을 넘지 않는다.

출력
첫째 줄에 이 단어에서 가장 많이 사용된 알파벳을 대문자로 출력한다. 단, 가장 많이 사용된 알파벳이 여러 개 존재하는 경우에는 ?를 출력한다.
*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String input = br.readLine();
		int[] count = new int[26];
		boolean overlap = false;
		
		for(int i = 0; i<input.length(); i++) {//해당 알파벳의 수를 새는 구간
			int check = input.charAt(i);
			if(check<97) {
				check+=32;
			}
			count[check-97]++;
		}
		//가장 많이 사용된 알파벳의 횟수를 찾고 중복을 확인하는 구간
		int maxCount = 0;
		char alpha = ' ';
		for(int i = 0; i<count.length; i++) {
			if(maxCount==count[i]) {
				overlap = true;
			}
			if(maxCount<count[i]) {
				overlap = false;
				maxCount = count[i];
				alpha = (char)(i+65);
			}
		}
		//출력
		if(overlap==false) {
			System.out.println(alpha);
		}else {
			System.out.println("?");
		}
		
	}
}

//?는 63 이라는 점을 몰라 중복여부를 boolean형식의 데이터로 처리했다 이과정에서 처리과정이 보다 길어졌다 아래의 코드를 보면 좋은 예시를 확인할 수 있다.

import java.io.IOException;

public class Main {
	public static void main(String[] args) throws IOException {
                                                        //BufferReader 안씀
		int[] arr = new int[26];                        //알파벳 빈도수 저장 배열
		
		int c = System.in.read();                       //바이트 단위로 값을 읽음
		
		while(c > 64) {                                 //A는 65부터라.
			if(c < 91)                                  //대문자일 경우
				arr[c - 65]++;                          //10진수 값 65를 빼줌. 'A'빼도 됨
			else                                        //소문자일 경우
				arr[c - 97]++;                          //10진수 값 97을 빼줌. 'a'빼도 됨
			c = System.in.read();                       //계속 바이트 단위로 읽음
		}
        
		int max = -1;
		int ch = -2;                                    //?는 63이라 후에 65에 -2하면 ?나오고 
                                                        //+i하면 해당 문자 나오고
		
		for(int i = 0; i < 26; i++) {
			if(arr[i] > max) {
				max = arr[i];
				ch = i;
			}
			else if(arr[i] == max)
				ch = -2;
		}
		System.out.print((char)(ch + 65));            //65(=A)에 ch 더해주면 해당 문자나옴
	}
}
