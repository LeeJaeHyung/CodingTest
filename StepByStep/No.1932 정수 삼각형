/*
    정수 삼각형

    시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
    2 초	128 MB	61354	34381	25793	58.635%
    문제
            7
          3   8
        8   1   0
      2   7   4   4
    4   5   2   6   5
    위 그림은 크기가 5인 정수 삼각형의 한 모습이다.

    맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라. 아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.

    삼각형의 크기는 1 이상 500 이하이다. 삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.

    입력
    첫째 줄에 삼각형의 크기 n(1 ≤ n ≤ 500)이 주어지고, 둘째 줄부터 n+1번째 줄까지 정수 삼각형이 주어진다.

    출력
    첫째 줄에 합이 최대가 되는 경로에 있는 수의 합을 출력한다.
*/

/*
  풀이 : DP를 이용하여 문제를 풀었습니다.
         점화식 유도 과정 dp[i][idx] = input[i][idx]현재 방문하고 있는값 + dp[i-1]에서 현재 idx를 접근 가능한 dp[i-1]를 찾음
         dp[i][idx]에 접근 가능한 값들은  dp[i-1][idx-1]와 dp[i-1][idx]가 될 수 있고 
         idx==0이면 dp[i-1][idx-1]이 존재하지 않음으로 dp[i-1][idx]만 들어올 수 있음
         i==idx이면 dp[i-1][idx]가 존재하지 않음 따라서 dp[i-1][idx-1]만 들어올 수 있음
         나머지 경우에는 dp[i-1][idx], dp[i-1][idx-1]모두 존재함으로 둘 중 큰 값을 더해준다.
         따라서 점화식의 유도과정은 다음과 같이 표현할수 잇다
         
          dp[0] = input[0]; // 시작값은 그냥 넣어줌

          for (int i = 1; i < N; i++) {
            for (int idx = 0; idx < dp[i].length; idx++) {
              dp[i][idx] = input[i][idx];
              if (idx == 0) {//  dp[i-1][idx-1]이 존재하지 않음
                dp[i][idx] += dp[i - 1][idx];
              } else if (idx == i) {// dp[i-1][idx]가 존재하지 않음
                dp[i][idx] += dp[i - 1][idx - 1];
              } else {// dp[i-1][idx], dp[i-1][idx-1]모두 존재
                dp[i][idx] += Math.max(dp[i - 1][idx], dp[i - 1][idx - 1]);
              }
            }
          }
          
          이후에 모든 값을 쌓았을때 dp[dp.lenght-1]의 모든 인덱스를 방문하여 해당 값들 중 가장 큰 값을 answer에 대입하여 출력하였습니다.
          
*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Main {
	static int[][] dp, input;
	static int N;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		input = new int[N][];
		dp = new int[N][];

		StringTokenizer st;
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			input[i] = new int[i + 1];
			dp[i] = new int[i + 1];
			for (int j = 0; j < i + 1; j++) {
				input[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		maxRoute();
	}

	public static void maxRoute() {
		dp[0] = input[0]; // 시작값은 그냥 넣어줌

		for (int i = 1; i < N; i++) {
			for (int idx = 0; idx < dp[i].length; idx++) {
				dp[i][idx] = input[i][idx];
				if (idx == 0) {
					dp[i][idx] += dp[i - 1][idx];
				} else if (idx == i) {
					dp[i][idx] += dp[i - 1][idx - 1];
				} else {
					dp[i][idx] += Math.max(dp[i - 1][idx], dp[i - 1][idx - 1]);
				}
			}
		}
		int answer = 0;
		for (int i = 0; i < dp[N - 1].length; i++) {
			if (answer < dp[N - 1][i]) {
				answer = dp[N - 1][i];
			}
		}
		System.out.println(answer);

	}

}
