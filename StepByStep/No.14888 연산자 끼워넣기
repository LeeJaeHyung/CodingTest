/*
    문제
    N개의 수로 이루어진 수열 A1, A2, ..., AN이 주어진다. 또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.

    우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 이때, 주어진 수의 순서를 바꾸면 안 된다.

    예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 예를 들어, 아래와 같은 식을 만들 수 있다.

    1+2+3-4×5÷6
    1÷2+3+4-5×6
    1+2÷3×4-5+6
    1÷2×3-4+5+6
    식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.

    1+2+3-4×5÷6 = 1
    1÷2+3+4-5×6 = 12
    1+2÷3×4-5+6 = 5
    1÷2×3-4+5+6 = 7
    N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.

    입력
    첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 둘째 줄에는 A1, A2, ..., AN이 주어진다. (1 ≤ Ai ≤ 100) 셋째 줄에는 합이 N-1인 4개의 정수가 주어지는데, 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다. 

    출력
    첫째 줄에 만들 수 있는 식의 결과의 최댓값을, 둘째 줄에는 최솟값을 출력한다. 연산자를 어떻게 끼워넣어도 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다. 또한, 앞에서부터 계산했을 때, 중간에 계산되는 식의 결과도 항상 -10억보다 크거나 같고, 10억보다 작거나 같다
*/

/*

풀이 :<처음 풀이>
      문제를 제대로 읽지 못해 입력도 순서를 바꾸어 최대값과 최소값을 구하는 풀이를 구하였습니다.
      다음부터는 문제의 주어진 조건을 완벽히 이해하고 문제를 풀도록 하겠습니다.
      
      <최종풀이> 
      boolean[] operatorVisited = new boolean [N-1] 선언 통해 방문한 연산자를 체크하며 재귀호출을 하고 모든 경우의 수를 체크 하도록함
      모든 연산자를 들을 배열에 집어 넣고 insertOperator()호출
      insertOperator(0, input[0])호출
      
      for문을 돌며 operatorVisited[i]가 false일때만 값을 true로 바꾼후
      insertOperator(idx + 1, operator(before, operator[i], input[idx]))를 재귀호출
      
      return조건은 idx == N 일때
      해당 함수의 before과 max, min을 비교하여 가장큰값을 max에 담고 min에 담고 return
      
      다시 operatorVisited[i]를 false를 대입후 for문을 진행하여 
      
      백트레킹 방식으로 답을 구하였습니다.
      
      

*/
/*
<처음풀이 : 입력 순서도 변경하면서 최대값 찾기>
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Main {

	static int N;
	static int[] input;
	static int[] operator;
	static int max = -1000000000;
	static int min = 1000000000;
	static boolean[] inputVisited;
	static boolean[] operatorVisited;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		input = new int[N];
		inputVisited = new boolean[N];
		operator = new int[N - 1]; // 0 = +, 1 = -, 2 = *, 3 = /
		operatorVisited = new boolean[N - 1];

		StringTokenizer st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			input[i] = Integer.parseInt(st.nextToken());
		}
		st = new StringTokenizer(br.readLine());
		int oIdx = 0;
		for (int i = 0; i < 4; i++) {
			int loopCount = Integer.parseInt(st.nextToken());
			for (int j = 0; j < loopCount; j++) {
				operator[oIdx++] = i;
			}
		}
		insertOperator();
		System.out.println(max);
		System.out.println(min);
	}

	public static void insertOperator() {
		for (int i = 0; i < N; i++) {
			inputVisited[i] = true;
			insertOperator(0, input[i]);
			inputVisited[i] = false;
		}
	}

	public static void insertOperator(int idx, int before) {
		if (idx == N - 1) {
			if (before > max) {
				max = before;
			}
			if (before < min) {
				min = before;
			}
			return;
		}
		// 1. 연산자 고름
		// 2. input 고름
		for (int i = 0; i < N - 1; i++) {
			if (!operatorVisited[i]) {
				operatorVisited[i] = true;
				for (int j = 0; j < N; j++) {
					if (!inputVisited[j]) {
						inputVisited[j] = true;
						insertOperator(idx + 1, operator(before, operator[i], input[j]));
						inputVisited[j] = false;
					}
				}
				operatorVisited[i] = false;
			}
		}

	}

	public static int operator(int x, int oper, int y) {
		int operated = 0;
		switch (oper) {
		case 0:
			operated = x + y;
			break;
		case 1:
			operated = x - y;
			break;
		case 2:
			operated = x * y;
			break;
		case 3:
			operated = x / y;
			break;
		}
		return operated;
	}
}
*/
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Main {

	static int N;
	static int[] input;
	static int[] operator;
	static int max = -1000000000;
	static int min = 1000000000;
	static boolean[] operatorVisited;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		input = new int[N];
		operator = new int[N - 1]; // 0 = +, 1 = -, 2 = *, 3 = /
		operatorVisited = new boolean[N - 1];

		StringTokenizer st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			input[i] = Integer.parseInt(st.nextToken());
		}
		st = new StringTokenizer(br.readLine());
		int oIdx = 0;
		for (int i = 0; i < 4; i++) {
			int loopCount = Integer.parseInt(st.nextToken());
			for (int j = 0; j < loopCount; j++) {
				operator[oIdx++] = i;
			}
		}
		insertOperator();
		System.out.println(max);
		System.out.println(min);
	}

	public static void insertOperator() {
		insertOperator(1, input[0]);
	}

	public static void insertOperator(int idx, int before) {
		if (idx == N) {
			if (before > max) {
				max = before;
			}
			if (before < min) {
				min = before;
			}
			return;
		}
		// 1. 연산자 고름
		// 2. input 고름
		for (int i = 0; i < N - 1; i++) {
			if (!operatorVisited[i]) {
				operatorVisited[i] = true;
				insertOperator(idx + 1, operator(before, operator[i], input[idx]));
				operatorVisited[i] = false;
			}
		}
	}

	public static int operator(int x, int oper, int y) {
		int operated = 0;
		switch (oper) {
		case 0:
			operated = x + y;
			break;
		case 1:
			operated = x - y;
			break;
		case 2:
			operated = x * y;
			break;
		case 3:
			operated = x / y;
			break;
		}
		return operated;
	}
}
