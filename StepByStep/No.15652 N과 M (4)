/*
    N과 M (4) 성공

    시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
    1 초	512 MB	28200	22291	18028	79.164%
    문제
    자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.

    1부터 N까지 자연수 중에서 M개를 고른 수열
    같은 수를 여러 번 골라도 된다.
    고른 수열은 비내림차순이어야 한다.
    길이가 K인 수열 A가 A1 ≤ A2 ≤ ... ≤ AK-1 ≤ AK를 만족하면, 비내림차순이라고 한다.
    입력
    첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)

    출력
    한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.

    수열은 사전 순으로 증가하는 순서로 출력해야 한다.
*/

/*
  풀이 : solution(int idx, int before)을 재귀 호풀 하여 풀었습니다.
        solution함수는 idx == M일때 까지 for문을 이용하여 answer[idx*2]에 i값을 대입 하게 되고 solution(idx + 1, i)의 재귀호출을 진행합니다.
        idx == M 일때 StringBuilder에 값을 쌓고 retrun을 하여 이전의 재귀 함수의 호출한곳으로 돌아가 과정을 다시 진행 하게 됩니다.
        
*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Main {
	static int N, M;
	static char[] answer;
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		answer = new char[2 * M];

		for (int i = 0; i < M - 1; i++)
			answer[2 * i + 1] = ' ';
		answer[2 * M - 1] = '\n';
		solution(0, 1);
		System.out.println(sb);
	}

	public static void solution(int idx, int before) {
		if (idx == M) {
			sb.append(answer);
			return;
		}
		for (int i = before; i < N + 1; i++) {
			answer[idx * 2] = (char) (i + '0');
			solution(idx + 1, i);
		}
	}
}
