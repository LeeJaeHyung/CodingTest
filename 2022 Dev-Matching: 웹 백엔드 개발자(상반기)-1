/*프로그래머스에서 진행하는 <2022 Dev-Matching: 웹 백엔드 개발자(상반기)-1>에 지원하였습니다.*/
/*
풀어본 문제 <1번 문제>

점과 점사이의 거리가 2차원 배열의 형태로 주어지고 

<int[][] dist>
  0 5 2 4 1
  5 0 3 9 6
  2 3 0 6 3
  4 9 6 0 3
  1 6 3 3 0

위와 같이 주어지게 된다
dist[i][j] = i 와 j 사이의 거리 가 된다.

풀이 방식은 처음 접해보는 유형의 문제라 상당히 어려웠습니다.

<처음 도전한 풀이>    
   0과 1을 dist.length 크기의 배열에 넣은후 나머지 수들을 넣는 방식으로 계산을 해보았더니 
   x0x1x 가 되고 x가들어갈수있는 위치가 됩니다.
   이러한 방식으로 문제를 풀려고 접근하다 보니 상대적으로 비교해야할 경우의 수가 많아져 다른 방식을 찾아보았습니다.
   
<정답을 맞춘 풀이>
   점과 점들 사이의 거리가 가장 큰값을 찾고 해당 값을 가지는 인덱스 i와 j를 도출해 내고 dist.length 크기의 배열 newDist를 만든후
   dist[i]의 배열에서 가장 작은 값을 가지는 순으로 인덱스 번호를 도출 해준후 해당 값을 newDist에 대입시킨후
   int[][] answer의 0번 인덱스에 대입 1번 인덱스에는 값을 반전시켜 대입 하였습니다.
   
   이후 answer의 값들은 사전순으로 정렬되어야 하기 때문에
   정렬 하는 메소드 sort를 만들어 answer에 담긴 값들을 정리한후 해당 값을 retrun하여 문제를 풀었습니다.
   
생각한 것보다 난이도가 높아 1번 문제 밖에 못풀었지만 코딩테스트 공부를 더열심히하여서 
다음 코딩테스트에서는 문제를 한문제라도 더 많이 풀고싶습니다.


부족한점 
DFS,BFS등의 탐색알고리즘+힙정렬 
DP
위의 세가지 방식에 대한 공부는 5월 2일 까지 맞치는것이 목표입니다.

<다시 풀어본 코드>
*/
class Solution {
	
	static int[] subArr;
	
	public static void main(String[] args) {
		int[][] dist = {{0,5,2,4,1},{5,0,3,9,6},{2,3,0,6,3},{4,9,6,0,3,},{1,6,3,3,0}};
		int[][] answer = solution(dist);
		
		for(int[] x : answer) {
			System.out.print("[");
			for(int y : x) {
				System.out.print(y+" ");
			}
			System.out.println("]");
		}
		
	}
	
    public static int[][] solution(int[][] dist) {
    	int[][] answer = {};
    	
    	int distanceM = 0; 
    	int target = 0;
    	
    	for(int i = 0; i < dist[0].length-1; i++) {
    		for(int j = i+1; j < dist.length; j++ ) {
    			if(distanceM<dist[i][j]) {
    				distanceM = dist[i][j];
    				target = i;
    			}
    		}
    	}
    	
    	answer = arr(dist[target]);
    	
        
        return answer;
    }
    
    public static int[][] arr(int[] dist) {
    	int[] answer = new int[dist.length];
    	for(int i = 0; i < answer.length; i++) {
    		answer[i] = dist[i];
    	}
    	subArr = new int[dist.length];
    	mergeSort(answer);
    	for(int i = 0; i < answer.length; i++) {
    		for(int j = 0; j < dist.length; j++) {
    			if(answer[i] == dist[j]) {
    				subArr[i] = j;
    				break;
    			}
    		}
    	}
    	return dictionarySort();
    }
    
    public static void mergeSort(int[] answer) {
    	mergeSort(answer, 0, answer.length-1);
    }
  
    public static void mergeSort(int[] answer, int start, int end) {
    	if(start<end) {
    		int mid = (start+end)/2;
    		mergeSort(answer, start, mid);
    		mergeSort(answer, mid+1, end);
    		merge(answer, start, mid, end);
    	}
    }
    
    public static void merge(int[] answer, int start, int mid, int end) {
    	int left = start;
    	int right = mid+1;
    	int count = 0;
    	while(left<=mid&&right<=end) {
    		if(answer[left]<answer[right]) {
    			subArr[count++]  = answer[left++];
    		}else {
    			subArr[count++]  = answer[right++];
    		}
    	}
    	while(left<=mid) {
    		subArr[count++]  = answer[left++];
    	}
    	while(right<=end) {
    		subArr[count++]  = answer[right++];
    	}
    	
    	for(int i = 0; i < count; i++) {
    		answer[i+start] = subArr[i];
    	}
    }
    
    public static int[][] dictionarySort() {
    	int[][] answer = new int[2][];
    	int[] toggle = new int[subArr.length];
    	for(int i = 0; i < subArr.length; i++) {
    		toggle[i] = subArr[subArr.length-i-1];
    	}
    	if(toggle[0]<subArr[0]) {
    		answer[0] = toggle;
    		answer[1] = subArr;
    	}else {
    		answer[0] = subArr;
    		answer[1] = toggle;
    	}
    	
    	return answer;
    }
    
    
   
}
